<script>
  let cart = [];
  let discountPercent = 0;

  function loadCart() {
    const cartData = localStorage.getItem('cart');
    const discountData = localStorage.getItem('discountPercent');

    cart = cartData ? JSON.parse(cartData) : [];
    discountPercent = discountData ? parseFloat(discountData) : 0;

    if (cart.length === 0) {
      window.location.href = '/sepet';
      return;
    }

    renderOrderSummary();
  }

  function renderOrderSummary() {
    const orderItemsContainer = document.getElementById('order-items');
    if (!orderItemsContainer) return;

    orderItemsContainer.innerHTML = cart.map(item => `
      <div class="order-item">
        <div class="order-item-image">
          <img src="${item.image}" alt="${item.name}">
        </div>
        <div class="order-item-details">
          <h4>${item.name}</h4>
          <p>${item.quantity} adet × ${item.price}₺</p>
        </div>
        <div class="order-item-price">
          ${(item.price * item.quantity).toFixed(2)}₺
        </div>
      </div>
    `).join('');

    updateSummary();
  }

  function calculateSubtotal() {
    return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  }

  function updateSummary() {
    const subtotal = calculateSubtotal();
    const shipping = subtotal >= 1000 ? 0 : 50;
    const discount = (subtotal * discountPercent) / 100;
    const total = subtotal + shipping - discount;

    const subtotalEl = document.getElementById('summary-subtotal');
    const shippingEl = document.getElementById('summary-shipping');
    const discountEl = document.getElementById('summary-discount');
    const discountRow = document.getElementById('summary-discount-row');
    const totalEl = document.getElementById('summary-total');

    if (subtotalEl) subtotalEl.textContent = `${subtotal.toFixed(2)}₺`;
    if (shippingEl) shippingEl.textContent = shipping === 0 ? 'Ücretsiz' : `${shipping}₺`;
    if (discountEl) discountEl.textContent = `-${discount.toFixed(2)}₺`;
    if (discountRow) discountRow.classList.toggle('hidden', discount === 0);
    if (totalEl) totalEl.textContent = `${total.toFixed(2)}₺`;
  }

  function calculateTotal() {
    const subtotal = calculateSubtotal();
    const shipping = subtotal >= 1000 ? 0 : 50;
    const discount = (subtotal * discountPercent) / 100;
    return subtotal + shipping - discount;
  }

  // Fatura adresi toggle
  const sameAddressCheckbox = document.getElementById('same-address');
  const billingAddressSection = document.getElementById('billing-address-section');

  if (sameAddressCheckbox) {
    sameAddressCheckbox.addEventListener('change', () => {
      if (billingAddressSection) {
        billingAddressSection.classList.toggle('hidden', sameAddressCheckbox.checked);

        const billingInputs = billingAddressSection.querySelectorAll('input, textarea');
        billingInputs.forEach(input => {
          input.required = !sameAddressCheckbox.checked;
        });
      }
    });
  }

  // Form gönderimi
  const checkoutForm = document.getElementById('checkout-form');

  if (checkoutForm) {
    checkoutForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const submitBtn = document.getElementById('submit-payment');
      submitBtn.disabled = true;
      submitBtn.textContent = 'İşleniyor...';

      const formData = new FormData(checkoutForm);
      const sameAddress = document.getElementById('same-address').checked;

      const name = formData.get('name');
      const surname = formData.get('surname');
      const email = formData.get('email');
      const phone = formData.get('phone');
      const identity = formData.get('identity');

      const shippingCity = formData.get('shippingCity');
      const shippingAddress = formData.get('shippingAddress');

      const billingCity = sameAddress ? shippingCity : formData.get('billingCity');
      const billingAddress = sameAddress ? shippingAddress : formData.get('billingAddress');

      const subtotal = calculateSubtotal();
      const total = calculateTotal();

      console.log('📦 Payment Request Prepared:');
      console.log('💰 Subtotal:', subtotal);
      console.log('💰 Total:', total);
      console.log('👤 Buyer:', name, surname);
      console.log('📧 Email:', email);

      // ✅ CRITICAL: Sipariş bilgilerini localStorage'a kaydet
      const orderData = {
        customerEmail: email,
        customerName: `${name} ${surname}`,
        customerPhone: phone,
        customerAddress: shippingAddress,
        items: cart.map(item => ({
          name: item.name,
          quantity: item.quantity,
          price: item.price
        }))
      };

      console.log('💾 Saving order data to localStorage:', orderData);
      localStorage.setItem('pendingOrder', JSON.stringify(orderData));
      console.log('✅ Order data saved successfully');

      const paymentData = {
        price: subtotal.toFixed(2),
        paidPrice: total.toFixed(2),
        basketId: `BASKET-${Date.now()}`,
        buyer: {
          id: identity,
          name: name,
          surname: surname,
          gsmNumber: phone,
          email: email,
          identityNumber: identity,
          registrationAddress: shippingAddress,
          ip: '85.34.78.112',
          city: shippingCity,
          country: 'Turkey'
        },
        shippingAddress: {
          contactName: `${name} ${surname}`,
          city: shippingCity,
          country: 'Turkey',
          address: shippingAddress
        },
        billingAddress: {
          contactName: `${name} ${surname}`,
          city: billingCity,
          country: 'Turkey',
          address: billingAddress
        },
        basketItems: cart.map(item => ({
          id: item.id.toString(),
          name: item.name,
          category1: 'Gıda',
          itemType: 'PHYSICAL',
          price: (item.price * item.quantity).toFixed(2)
        }))
      };

      console.log('📤 Sending request to /api/create-payment...');

      try {
        const response = await fetch('/api/create-payment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(paymentData)
        });

        console.log('📥 Response Status:', response.status);

        let data;
        try {
          data = await response.json();
          console.log('📥 Response Data:', data);
        } catch (jsonError) {
          console.error('❌ JSON Parse Error:', jsonError);
          const text = await response.text();
          console.error('❌ Response Text:', text);
          throw new Error('Invalid JSON response from server');
        }

        if (response.ok && data.status === 'success') {
          if (data.paymentPageUrl) {
            console.log('✅ Payment page URL received:', data.paymentPageUrl);
            console.log('✅ Redirecting in 1 second...');

            setTimeout(() => {
              console.log('🚀 Redirecting now...');
              window.location.href = data.paymentPageUrl;
            }, 1000);
          } else {
            console.error('❌ No payment page URL in response:', data);
            alert('Ödeme sayfası bulunamadı. Lütfen tekrar deneyin.');
            submitBtn.disabled = false;
            submitBtn.textContent = 'Ödemeye Geç';
          }
        } else {
          console.error('❌ Payment request failed:', data);
          const errorMsg = data.errorMessage || data.error || 'Bilinmeyen hata';
          console.error('❌ Error message:', errorMsg);
          alert('Ödeme başlatılamadı: ' + errorMsg);
          submitBtn.disabled = false;
          submitBtn.textContent = 'Ödemeye Geç';
        }
      } catch (error) {
        console.error('❌ Network/Fetch Error:', error);
        alert('Bir hata oluştu: ' + error.message);
        submitBtn.disabled = false;
        submitBtn.textContent = 'Ödemeye Geç';
      }
    });
  }

  document.addEventListener('DOMContentLoaded', loadCart);
</script>