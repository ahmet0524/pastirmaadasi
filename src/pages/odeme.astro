// Mevcut checkoutForm submit handler'ınızı bulun ve değiştirin:

checkoutForm?.addEventListener('submit', async (e) => {
  e.preventDefault();

  const submitBtn = document.getElementById('submit-payment') as HTMLButtonElement;
  submitBtn.disabled = true;
  submitBtn.textContent = 'İşleniyor...';

  const formData = new FormData(checkoutForm);
  const sameAddress = (document.getElementById('same-address') as HTMLInputElement).checked;

  const name = formData.get('name') as string;
  const surname = formData.get('surname') as string;
  const email = formData.get('email') as string;
  const phone = formData.get('phone') as string;
  const identity = formData.get('identity') as string;

  const shippingCity = formData.get('shippingCity') as string;
  const shippingDistrict = formData.get('shippingDistrict') as string;
  const shippingAddress = formData.get('shippingAddress') as string;

  const billingCity = sameAddress ? shippingCity : formData.get('billingCity') as string;
  const billingAddress = sameAddress ? shippingAddress : formData.get('billingAddress') as string;

  const subtotal = calculateSubtotal();
  const total = calculateTotal();

  // ✅ EKLEME: Order data'yı localStorage'a kaydet
  const orderData = {
    customerEmail: email,
    customerName: `${name} ${surname}`,
    customerPhone: phone,
    customerAddress: `${shippingAddress}, ${shippingDistrict}, ${shippingCity}`,
    items: cart.map(item => ({
      name: item.name,
      price: item.price,
      quantity: item.quantity
    })),
    totalPrice: total.toFixed(2)
  };

  console.log('💾 Saving order data to localStorage:', orderData);
  localStorage.setItem('pendingOrder', JSON.stringify(orderData));

  console.log('📦 Payment Request Prepared:');
  console.log('💰 Subtotal:', subtotal);
  console.log('💰 Total:', total);
  console.log('👤 Buyer:', name, surname);
  console.log('📧 Email:', email);

  const paymentData = {
    price: subtotal.toFixed(2),
    paidPrice: total.toFixed(2),
    basketId: `BASKET-${Date.now()}`,
    buyer: {
      id: identity,
      name: name,
      surname: surname,
      gsmNumber: phone,
      email: email,
      identityNumber: identity,
      registrationAddress: shippingAddress,
      ip: '85.34.78.112',
      city: shippingCity,
      country: 'Turkey'
    },
    shippingAddress: {
      contactName: `${name} ${surname}`,
      city: shippingCity,
      country: 'Turkey',
      address: shippingAddress
    },
    billingAddress: {
      contactName: `${name} ${surname}`,
      city: billingCity,
      country: 'Turkey',
      address: billingAddress
    },
    basketItems: cart.map(item => ({
      id: item.id.toString(),
      name: item.name,
      category1: 'Gıda',
      itemType: 'PHYSICAL',
      price: (item.price * item.quantity).toFixed(2)
    }))
  };

  console.log('📤 Sending request to /api/create-payment...');

  try {
    const response = await fetch('/api/create-payment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(paymentData)
    });

    console.log('📥 Response Status:', response.status);

    let data;
    try {
      data = await response.json();
      console.log('📥 Response Data:', data);
    } catch (jsonError) {
      console.error('❌ JSON Parse Error:', jsonError);
      const text = await response.text();
      console.error('❌ Response Text:', text);
      throw new Error('Invalid JSON response from server');
    }

    if (response.ok && data.status === 'success') {
      if (data.paymentPageUrl) {
        console.log('✅ Payment page URL received:', data.paymentPageUrl);
        console.log('✅ Redirecting...');
        window.location.href = data.paymentPageUrl;
      } else {
        console.error('❌ No payment page URL in response:', data);
        alert('Ödeme sayfası bulunamadı. Lütfen tekrar deneyin.');
        submitBtn.disabled = false;
        submitBtn.textContent = 'Ödemeye Geç';
      }
    } else {
      console.error('❌ Payment request failed:', data);
      const errorMsg = data.errorMessage || data.error || 'Bilinmeyen hata';
      alert('Ödeme başlatılamadı: ' + errorMsg);
      submitBtn.disabled = false;
      submitBtn.textContent = 'Ödemeye Geç';
    }
  } catch (error) {
    console.error('❌ Network/Fetch Error:', error);
    alert('Bir hata oluştu: ' + error.message);
    submitBtn.disabled = false;
    submitBtn.textContent = 'Ödemeye Geç';
  }
});