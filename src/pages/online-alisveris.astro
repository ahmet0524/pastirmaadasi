---
// src/pages/online-alisveris.astro - FIXED VERSION
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { supabase } from '../lib/supabase';

// Kategorilere göre ürünleri çek
const { data: pastirmaProducts } = await supabase
  .from('products')
  .select('*')
  .eq('category', 'Pastırma')
  .eq('is_active', true)
  .limit(4);

const { data: sucukProducts } = await supabase
  .from('products')
  .select('*')
  .eq('category', 'Sucuk')
  .eq('is_active', true)
  .limit(5);

const { data: mantiProducts } = await supabase
  .from('products')
  .select('*')
  .eq('category', 'Mantı')
  .eq('is_active', true)
  .limit(2);

const banners = [
  {
    image: '/assets/banners/pastirma-banner.jpg',
    title: 'Geleneksel Kayseri Pastırması',
    subtitle: 'En kaliteli etlerden üretilir',
    link: '/pastirma'
  },
  {
    image: '/assets/banners/sucuk-banner.jpg',
    title: 'Lezzet Garantili Sucuklar',
    subtitle: '%100 dana etinden',
    link: '/sucuk'
  },
  {
    image: '/assets/banners/manti-banner.jpg',
    title: 'El Yapımı Kayseri Mantısı',
    subtitle: 'Anneanne lezzeti',
    link: '/manti'
  }
];

// Resim URL'sini al (array veya string olabilir) - Supabase parse
function getImageUrl(imgs: any): string {
  const placeholder = '/assets/image/placeholder.jpg';

  if (!imgs) return placeholder;

  // 1. Array ise
  if (Array.isArray(imgs)) {
    if (imgs.length === 0) return placeholder;
    const firstImage = String(imgs[0]).replace(/^"|"$/g, '').replace(/""/g, '').trim();
    return firstImage || placeholder;
  }

  // 2. String ise
  if (typeof imgs === 'string') {
    // PostgreSQL array: {path1,path2}
    if (imgs.startsWith('{') && imgs.endsWith('}')) {
      const paths = imgs.slice(1, -1).split(',').map(p => p.trim().replace(/^"|"$/g, ''));
      if (paths.length > 0 && paths[0]) return paths[0];
    }

    // JSON array: ["path1"]
    if (imgs.startsWith('[')) {
      try {
        const cleaned = imgs.replace(/""/g, '"').replace(/\\"/g, '"');
        const parsed = JSON.parse(cleaned);
        if (Array.isArray(parsed) && parsed.length > 0) {
          return String(parsed[0]).replace(/^"|"$/g, '').trim() || placeholder;
        }
      } catch (e) {
        console.error('Image parse error:', e);
      }
    }

    // Direkt URL
    const cleaned = imgs.replace(/^"|"$/g, '').trim();
    if (cleaned.startsWith('/') || cleaned.startsWith('http')) return cleaned;
  }

  return placeholder;
}
---

<BaseLayout title="Online Alışveriş" description="Pastırma Adası ürünlerini online sipariş edin">
  <Header slot="header" />

  <!-- Hero Banner Slider -->
  <section class="hero-banner">
    <div class="banner-slider">
      {banners.map((banner, index) => (
        <div class={`banner-slide ${index === 0 ? 'active' : ''}`}>
          <a href={banner.link} class="banner-link">
            <div class="banner-image">
              <img
                src={banner.image}
                alt={banner.title}
                loading={index === 0 ? 'eager' : 'lazy'}
                fetchpriority={index === 0 ? 'high' : 'auto'}
              />
              <div class="banner-overlay"></div>
            </div>
            <div class="banner-content">
              <h2>{banner.title}</h2>
              <p>{banner.subtitle}</p>
            </div>
          </a>
        </div>
      ))}
    </div>

    <button class="slider-btn slider-prev" aria-label="Önceki">
      <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button class="slider-btn slider-next" aria-label="Sonraki">
      <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <div class="slider-dots">
      {banners.map((_, index) => (
        <button class={`dot ${index === 0 ? 'active' : ''}`} data-slide={index} aria-label={`Slayt ${index + 1}`}></button>
      ))}
    </div>
  </section>

  <!-- Pastırma Section -->
  {pastirmaProducts && pastirmaProducts.length > 0 && (
    <section class="products-section">
      <div class="container">
        <h2 class="section-title">Kayseri Pastırması</h2>
        <div class="products-grid">
          {pastirmaProducts.map((product, index) => (
            <div class="product-card" data-product-id={product.id}>
              <div class="product-image-wrapper">
                <img
                  src={getImageUrl(product.images)}
                  alt={product.name}
                  class="product-image"
                  loading={index < 2 ? "eager" : "lazy"}
                  fetchpriority={index < 2 ? "high" : "auto"}
                  onerror="this.onerror=null; this.src='/assets/image/placeholder.jpg';"
                />
                <div class="product-overlay">
                  <a href={`/urun/${product.slug}`} class="btn-view-product">Ürünü İncele</a>
                </div>
                <h3 class="product-name-overlay">{product.name}</h3>
              </div>
              <div class="product-info">
                <p class="product-price">
                  {product.price}₺
                  <span class="price-unit">/{product.unit}</span>
                </p>
                <button class="btn-add-cart" data-product={JSON.stringify({
                  id: product.id,
                  name: product.name,
                  image: getImageUrl(product.images),
                  variants: product.variants,
                  slug: product.slug
                })}>
                  Sepete Ekle
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Sucuk Section -->
  {sucukProducts && sucukProducts.length > 0 && (
    <section class="products-section bg-light">
      <div class="container">
        <h2 class="section-title">Kayseri Sucuğu</h2>
        <div class="products-grid">
          {sucukProducts.map((product, index) => (
            <div class="product-card" data-product-id={product.id}>
              <div class="product-image-wrapper">
                <img
                  src={getImageUrl(product.images)}
                  alt={product.name}
                  class="product-image"
                  loading="lazy"
                  onerror="this.onerror=null; this.src='/assets/image/placeholder.jpg';"
                />
                <div class="product-overlay">
                  <a href={`/urun/${product.slug}`} class="btn-view-product">Ürünü İncele</a>
                </div>
                <h3 class="product-name-overlay">{product.name}</h3>
              </div>
              <div class="product-info">
                <p class="product-price">
                  {product.price}₺
                  <span class="price-unit">/{product.unit}</span>
                </p>
                <button class="btn-add-cart" data-product={JSON.stringify({
                  id: product.id,
                  name: product.name,
                  image: getImageUrl(product.images),
                  variants: product.variants,
                  slug: product.slug
                })}>
                  Sepete Ekle
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Mantı Section -->
  {mantiProducts && mantiProducts.length > 0 && (
    <section class="products-section">
      <div class="container">
        <h2 class="section-title">Kayseri Mantısı</h2>
        <div class="products-grid">
          {mantiProducts.map((product, index) => (
            <div class="product-card" data-product-id={product.id}>
              <div class="product-image-wrapper">
                <img
                  src={getImageUrl(product.images)}
                  alt={product.name}
                  class="product-image"
                  loading="lazy"
                  onerror="this.onerror=null; this.src='/assets/image/placeholder.jpg';"
                />
                <div class="product-overlay">
                  <a href={`/urun/${product.slug}`} class="btn-view-product">Ürünü İncele</a>
                </div>
                <h3 class="product-name-overlay">{product.name}</h3>
              </div>
              <div class="product-info">
                <p class="product-price">
                  {product.price}₺
                  <span class="price-unit">/{product.unit}</span>
                </p>
                <button class="btn-add-cart" data-product={JSON.stringify({
                  id: product.id,
                  name: product.name,
                  image: getImageUrl(product.images),
                  variants: product.variants,
                  slug: product.slug
                })}>
                  Sepete Ekle
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Add to Cart Modal -->
  <div id="cart-modal" class="cart-modal">
    <div class="modal-content">
      <button class="modal-close" aria-label="Kapat">
        <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <div class="modal-body">
        <img id="modal-product-image" src="" alt="" class="modal-product-image" />
        <h3 id="modal-product-name"></h3>

        <div class="variant-selector">
          <label>Gramaj Seçin:</label>
          <div id="variant-options" class="variant-options"></div>
        </div>

        <div class="quantity-selector">
          <label>Adet:</label>
          <div class="quantity-controls">
            <button class="qty-btn qty-minus">-</button>
            <input type="number" class="qty-input" value="1" min="1" />
            <button class="qty-btn qty-plus">+</button>
          </div>
        </div>

        <div class="modal-price">
          <span class="price-label">Toplam:</span>
          <span id="modal-total-price" class="total-price">0₺</span>
        </div>

        <button id="confirm-add-cart" class="btn btn-primary btn-large">Sepete Ekle</button>
      </div>
    </div>
  </div>

  <!-- Cart Success Modal -->
  <div id="success-modal" class="cart-modal">
    <div class="modal-content success-content">
      <div class="success-icon">
        <svg width="60" height="60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      </div>
      <h3>Ürün sepete eklendi!</h3>
      <div class="success-buttons">
        <button id="go-to-cart" class="btn btn-primary">Sepete Git</button>
        <button id="continue-shopping" class="btn btn-outline">Alışverişe Devam</button>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<style>
  /* Tüm stiller aynı kalacak - sadece HTML'i güncelledik */
  /* ... (önceki tüm style kodları buraya gelecek) ... */
</style>

<script>
  // Banner Slider
  let currentSlide = 0;
  const slides = document.querySelectorAll('.banner-slide');
  const dots = document.querySelectorAll('.slider-dots .dot');
  const totalSlides = slides.length;

  function showSlide(index: number) {
    slides.forEach(slide => slide.classList.remove('active'));
    dots.forEach(dot => dot.classList.remove('active'));

    currentSlide = (index + totalSlides) % totalSlides;
    slides[currentSlide].classList.add('active');
    dots[currentSlide].classList.add('active');
  }

  function nextSlide() {
    showSlide(currentSlide + 1);
  }

  function prevSlide() {
    showSlide(currentSlide - 1);
  }

  let slideInterval = setInterval(nextSlide, 5000);

  document.querySelector('.slider-next')?.addEventListener('click', () => {
    nextSlide();
    clearInterval(slideInterval);
    slideInterval = setInterval(nextSlide, 5000);
  });

  document.querySelector('.slider-prev')?.addEventListener('click', () => {
    prevSlide();
    clearInterval(slideInterval);
    slideInterval = setInterval(nextSlide, 5000);
  });

  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      showSlide(index);
      clearInterval(slideInterval);
      slideInterval = setInterval(nextSlide, 5000);
    });
  });

  // Modal functionality
  const cartModal = document.getElementById('cart-modal');
  const successModal = document.getElementById('success-modal');
  let selectedProduct: any = null;
  let selectedVariant: any = null;

  document.querySelectorAll('.btn-add-cart').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const productData = btn.getAttribute('data-product');
      if (productData) {
        selectedProduct = JSON.parse(productData);
        openCartModal(selectedProduct);
      }
    });
  });

  function openCartModal(product: any) {
    cartModal?.classList.add('active');
    document.body.style.overflow = 'hidden';

    const modalImage = document.getElementById('modal-product-image') as HTMLImageElement;
    const modalName = document.getElementById('modal-product-name');
    const variantOptions = document.getElementById('variant-options');

    if (modalImage) modalImage.src = product.image;
    if (modalName) modalName.textContent = product.name;

    if (variantOptions && product.variants) {
      variantOptions.innerHTML = '';
      product.variants.forEach((variant: any, index: number) => {
        const btn = document.createElement('button');
        btn.className = `variant-btn ${index === 0 ? 'active' : ''}`;
        btn.textContent = `${variant.label} - ${variant.price}₺`;
        btn.addEventListener('click', () => {
          document.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          selectedVariant = variant;
          updateTotalPrice();
        });
        variantOptions.appendChild(btn);
      });

      selectedVariant = product.variants[0];
      updateTotalPrice();
    }

    const qtyInput = document.querySelector('.qty-input') as HTMLInputElement;
    if (qtyInput) qtyInput.value = '1';
  }

  function updateTotalPrice() {
    const qtyInput = document.querySelector('.qty-input') as HTMLInputElement;
    const totalPriceEl = document.getElementById('modal-total-price');

    if (qtyInput && totalPriceEl && selectedVariant) {
      const quantity = parseInt(qtyInput.value) || 1;
      const total = selectedVariant.price * quantity;
      totalPriceEl.textContent = `${total}₺`;
    }
  }

  document.querySelector('.qty-minus')?.addEventListener('click', () => {
    const input = document.querySelector('.qty-input') as HTMLInputElement;
    if (input) {
      const currentValue = parseInt(input.value) || 1;
      if (currentValue > 1) {
        input.value = (currentValue - 1).toString();
        updateTotalPrice();
      }
    }
  });

  document.querySelector('.qty-plus')?.addEventListener('click', () => {
    const input = document.querySelector('.qty-input') as HTMLInputElement;
    if (input) {
      const currentValue = parseInt(input.value) || 1;
      input.value = (currentValue + 1).toString();
      updateTotalPrice();
    }
  });

  document.querySelector('.qty-input')?.addEventListener('input', updateTotalPrice);

  document.querySelector('.modal-close')?.addEventListener('click', () => {
    cartModal?.classList.remove('active');
    document.body.style.overflow = '';
  });

  cartModal?.addEventListener('click', (e) => {
    if (e.target === cartModal) {
      cartModal.classList.remove('active');
      document.body.style.overflow = '';
    }
  });

  document.getElementById('confirm-add-cart')?.addEventListener('click', () => {
    const qtyInput = document.querySelector('.qty-input') as HTMLInputElement;
    const quantity = parseInt(qtyInput?.value) || 1;

    if (selectedProduct && selectedVariant) {
      const cartItem = {
        id: selectedProduct.id,
        name: `${selectedProduct.name} - ${selectedVariant.label}`,
        price: selectedVariant.price,
        image: selectedProduct.image,
        unit: selectedVariant.label,
        quantity: quantity
      };

      let cart = [];
      try {
        const cartData = localStorage.getItem('cart');
        cart = cartData ? JSON.parse(cartData) : [];
      } catch (e) {
        cart = [];
      }

      const existingItemIndex = cart.findIndex(
        (item: any) => item.id === cartItem.id && item.unit === cartItem.unit
      );

      if (existingItemIndex > -1) {
        cart[existingItemIndex].quantity += quantity;
      } else {
        cart.push(cartItem);
      }

      localStorage.setItem('cart', JSON.stringify(cart));
      window.dispatchEvent(new Event('cartUpdated'));

      cartModal?.classList.remove('active');
      successModal?.classList.add('active');
    }
  });

  document.getElementById('go-to-cart')?.addEventListener('click', () => {
    window.location.href = '/sepet';
  });

  document.getElementById('continue-shopping')?.addEventListener('click', () => {
    successModal?.classList.remove('active');
    document.body.style.overflow = '';
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (cartModal?.classList.contains('active')) {
        cartModal.classList.remove('active');
        document.body.style.overflow = '';
      }
      if (successModal?.classList.contains('active')) {
        successModal.classList.remove('active');
        document.body.style.overflow = '';
      }
    }
  });
</script>