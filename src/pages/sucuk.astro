---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import ProductCard from '../components/ProductCard.astro';
import { supabase } from '../lib/supabase';

// Supabase'den Sucuk kategorisindeki ürünleri çek
const { data: products, error } = await supabase
  .from('products')
  .select('*')
  .eq('category', 'Sucuk')
  .eq('is_active', true);

if (error) {
  console.error('Supabase hatası:', error);
}

// DEBUG: Ürünleri ve resim formatlarını konsola yazdır
if (products) {
  console.log('=== SUCUK PRODUCTS DEBUG ===');
  products.forEach(p => {
    console.log(`\nProduct: ${p.name}`);
    console.log('  Images Type:', typeof p.images);
    console.log('  Images Value:', p.images);
    console.log('  Is Array?:', Array.isArray(p.images));
    
    if (typeof p.images === 'string') {
      console.log('  Attempting to parse...');
      try {
        const parsed = JSON.parse(p.images);
        console.log('  Parsed:', parsed);
      } catch (e) {
        console.log('  Parse failed:', e.message);
      }
    }
  });
  console.log('=== END DEBUG ===\n');
}
---

<BaseLayout
  title="Kayseri Sucuğu - Pastırma Adası"
  description="Geleneksel yöntemlerle üretilen, farklı şekil ve boyutlarda Kayseri sucuğu çeşitlerimiz."
>
  <Header slot="header" />

  <section class="hero-section">
    <div class="hero-overlay"></div>
    <div class="hero-content">
      <h1 class="hero-title">Kayseri Sucuğu</h1>
      <p class="hero-subtitle">
        Özenle seçilmiş dana etinden, özel baharat karışımımızla hazırlanan geleneksel Kayseri sucuklarımız
      </p>
      <div class="hero-features">
        <div class="feature">
          <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          100% Dana Eti
        </div>
        <div class="feature">
          <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          Özel Baharat
        </div>
        <div class="feature">
          <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          Doğal Kurutma
        </div>
      </div>
    </div>
  </section>

  <section class="products-section">
    <div class="container">
      <div class="section-header">
        <h2>Sucuk Çeşitlerimiz</h2>
        <p>Farklı form ve boyutlarda, her damak tadına uygun sucuklar</p>
      </div>

      <!-- DEBUG INFO -->
      {products && (
        <div style="background: #f0f0f0; padding: 1rem; margin-bottom: 2rem; border-radius: 8px; font-family: monospace; font-size: 12px;">
          <strong>Debug Info:</strong>
          <ul style="margin: 0.5rem 0; padding-left: 1.5rem;">
            <li>Toplam Ürün: {products.length}</li>
            {products.map(p => (
              <li>
                {p.name}: 
                <span style="color: blue;">{typeof p.images}</span> - 
                <span style="color: green;">{Array.isArray(p.images) ? 'Array' : 'Not Array'}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {products && products.length > 0 ? (
        <div class="products-grid">
          {products.map(product => (
            <ProductCard
              id={product.id.toString()}
              slug={product.slug}
              name={product.name}
              price={product.price}
              images={product.images}
              unit={product.unit}
              description={product.description}
              variants={product.variants}
            />
          ))}
        </div>
      ) : (
        <div class="no-products">
          <p>Şu anda bu kategoride ürün bulunmamaktadır.</p>
        </div>
      )}
    </div>
  </section>

  <section class="info-section">
    <div class="container">
      <div class="info-grid">
        <div class="info-card">
          <div class="info-icon">
            <svg width="32" height="32" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
          <h3>Helal Sertifikalı</h3>
          <p>Tüm ürünlerimiz helal kesim ve hijyenik üretim standartlarına uygundur.</p>
        </div>
        <div class="info-card">
          <div class="info-icon">
            <svg width="32" height="32" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
            </svg>
          </div>
          <h3>Vakumlu Paket</h3>
          <p>Ürünlerimiz vakumlu ambalajda, tazeliğini koruyarak gönderilir.</p>
        </div>
        <div class="info-card">
          <div class="info-icon">
            <svg width="32" height="32" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
          <h3>Uzun Raf Ömrü</h3>
          <p>Doğru saklama koşullarında uzun süre taze kalır.</p>
        </div>
      </div>
    </div>
  </section>

  <Footer slot="footer" />
</BaseLayout>

<style>
  .hero-section {
    position: relative;
    background: linear-gradient(135deg, #0891b2 0%, #06b6d4 50%, #22d3ee 100%);
    padding: 5rem 1rem;
    text-align: center;
    color: white;
    min-height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, transparent 0%, rgba(0,0,0,0.15) 100%);
  }

  .hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    padding: 0 20px;
  }

  .hero-title {
    font-size: 48px;
    font-weight: 800;
    margin: 0 0 16px 0;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  }

  .hero-subtitle {
    font-size: 18px;
    line-height: 1.6;
    margin: 0 0 32px 0;
    opacity: 0.95;
  }

  .hero-features {
    display: flex;
    justify-content: center;
    gap: 32px;
    flex-wrap: wrap;
  }

  .feature {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 16px;
    font-weight: 600;
  }

  .products-section {
    padding: 80px 0;
    background: #f0fdfa;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .section-header {
    text-align: center;
    margin-bottom: 48px;
  }

  .section-header h2 {
    font-size: 36px;
    font-weight: 700;
    color: #134e4a;
    margin: 0 0 12px 0;
  }

  .section-header p {
    font-size: 18px;
    color: #0f766e;
    margin: 0;
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 32px;
  }

  .no-products {
    text-align: center;
    padding: 60px 20px;
  }

  .no-products p {
    font-size: 18px;
    color: #0f766e;
  }

  .info-section {
    padding: 80px 0;
    background: white;
  }

  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 32px;
  }

  .info-card {
    text-align: center;
    padding: 32px;
    background: linear-gradient(135deg, #f0fdfa 0%, #ccfbf1 100%);
    border-radius: 16px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 2px solid #99f6e4;
  }

  .info-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 32px rgba(6, 182, 212, 0.2);
  }

  .info-icon {
    width: 64px;
    height: 64px;
    margin: 0 auto 20px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #0891b2 0%, #06b6d4 100%);
    color: white;
  }

  .info-card h3 {
    font-size: 22px;
    font-weight: 700;
    color: #134e4a;
    margin: 0 0 12px 0;
  }

  .info-card p {
    font-size: 16px;
    color: #0f766e;
    line-height: 1.6;
    margin: 0;
  }

  @media (max-width: 768px) {
    .hero-section {
      min-height: 300px;
      padding: 3rem 1rem;
    }

    .hero-title {
      font-size: 32px;
    }

    .hero-subtitle {
      font-size: 16px;
    }

    .hero-features {
      flex-direction: column;
      gap: 16px;
    }

    .products-section {
      padding: 60px 0;
    }

    .section-header h2 {
      font-size: 28px;
    }

    .products-grid {
      grid-template-columns: 1fr;
      gap: 24px;
    }

    .info-section {
      padding: 60px 0;
    }

    .info-grid {
      grid-template-columns: 1fr;
      gap: 24px;
    }
  }
</style>

<script>
  // Client-side debug - sayfa yüklendikten sonra çalışır
  document.addEventListener('DOMContentLoaded', () => {
    console.log('🔍 CLIENT DEBUG STARTED');

    // Tüm product card'ları bul
    const productCards = document.querySelectorAll('.product-card');
    console.log('📦 Product Cards Found:', productCards.length);

    // Her card'daki image'i kontrol et
    productCards.forEach((card, index) => {
      const img = card.querySelector('.product-image');
      const name = card.querySelector('.product-name');

      console.log(`\n--- Product ${index + 1} ---`);
      console.log('Name:', name?.textContent);
      console.log('Image SRC:', img?.src);
      console.log('Image Natural Width:', img?.naturalWidth);
      console.log('Image Complete:', img?.complete);

      // Eğer placeholder kullanılıyorsa
      if (img?.src.includes('placeholder.jpg')) {
        console.warn('⚠️ PLACEHOLDER USED!');
      }
    });

    console.log('\n🏁 CLIENT DEBUG FINISHED');
  });
</script>