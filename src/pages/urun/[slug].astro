---
import { supabaseAdmin } from '../../lib/supabase';
import { parseImageArray } from '../../lib/imageParser';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

export async function getStaticPaths() {
  const { data: products } = await supabaseAdmin
    .from('products')
    .select('slug')
    .eq('is_active', true);

  if (!products || products.length === 0) {
    return [];
  }

  return products.map(product => ({
    params: { slug: product.slug }
  }));
}

const { slug } = Astro.params;

const { data: product, error } = await supabaseAdmin
  .from('products')
  .select('*')
  .eq('slug', slug)
  .eq('is_active', true)
  .single();

if (error || !product) {
  return Astro.redirect('/404');
}

// Yeni image parser kullan
const productImages = parseImageArray(product.images);

console.log('=== PRODUCT IMAGE DEBUG ===');
console.log('Product:', product.name);
console.log('Raw images:', product.images);
console.log('Parsed images:', productImages);
console.log('==========================');

const { data: relatedProducts } = await supabaseAdmin
  .from('products')
  .select('id, slug, name, price, unit, images')
  .eq('category', product.category)
  .eq('is_active', true)
  .neq('id', product.id)
  .limit(4);
---

<BaseLayout title={product.name} description={product.description}>
  <Header slot="header" />

  <section class="product-detail">
    <div class="container">
      <!-- DEBUG INFO - Geli≈ütirme sƒ±rasƒ±nda g√∂rmek i√ßin -->
      <div style="background: #e3f2fd; padding: 1rem; margin-bottom: 1rem; border-radius: 8px; border: 2px solid #2196f3;">
        <strong>üîç IMAGE DEBUG:</strong>
        <pre style="margin: 0.5rem 0; font-size: 11px; overflow-x: auto; background: white; padding: 0.5rem; border-radius: 4px;">{JSON.stringify({
          productName: product.name,
          slug: product.slug,
          rawImages: product.images,
          parsedImages: productImages,
          imageCount: productImages.length,
          firstImage: productImages[0]
        }, null, 2)}</pre>
      </div>

      <nav class="breadcrumb">
        <a href="/">Ana Sayfa</a>
        <span>/</span>
        <a href="/online-alisveris">Online Alƒ±≈üveri≈ü</a>
        <span>/</span>
        <a href={`/kategori/${product.category.toLowerCase()}`}>{product.category}</a>
        <span>/</span>
        <span>{product.name}</span>
      </nav>

      <div class="product-layout">
        <div class="product-gallery">
          <div class="main-image">
            <img
              id="main-product-image"
              src={productImages[0]}
              alt={product.name}
              onerror="console.error('‚ùå Main image failed:', this.src); this.style.border='3px solid red'; this.style.padding='20px';"
              onload="console.log('‚úÖ Main image loaded:', this.src);"
            />
            <div style="margin-top: 0.5rem; padding: 0.5rem; background: #f5f5f5; border-radius: 4px; font-size: 11px; word-break: break-all;">
              <strong>Current:</strong> <code id="current-image-url">{productImages[0]}</code>
            </div>
          </div>

          {productImages.length > 1 && (
            <div class="thumbnail-images">
              {productImages.map((img: string, index: number) => (
                <button
                  type="button"
                  class={`thumbnail-btn ${index === 0 ? 'active' : ''}`}
                  data-image={img}
                  data-index={index}
                  aria-label={`${product.name} resmi ${index + 1}`}
                >
                  <img
                    src={img}
                    alt={`${product.name} - ${index + 1}`}
                    onerror="console.error('‚ùå Thumbnail failed:', this.src); this.style.border='2px solid red';"
                    onload="console.log('‚úÖ Thumbnail loaded:', this.src);"
                  />
                  <div style="position: absolute; bottom: 2px; right: 2px; font-size: 10px; padding: 2px 4px; background: rgba(0,0,0,0.8); color: white; border-radius: 2px;">
                    #{index + 1}
                  </div>
                </button>
              ))}
            </div>
          )}

          {productImages.length === 1 && (
            <div style="background: #fff3cd; padding: 0.75rem; margin-top: 1rem; border-radius: 6px; border-left: 4px solid #ffc107;">
              <strong>‚ÑπÔ∏è Bilgi:</strong> Bu √ºr√ºn i√ßin sadece 1 g√∂rsel mevcut
            </div>
          )}
        </div>

        <div class="product-content">
          <h1>{product.name}</h1>

          <div class="product-rating">
            <div class="stars">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
            <span class="review-count">(24 deƒüerlendirme)</span>
          </div>

          <p class="product-description">{product.description}</p>

          <div class="price-section">
            <span class="price-label">Fiyat:</span>
            <span id="display-price" class="price-value">{product.price}‚Ç∫</span>
            <span class="price-unit">/ <span id="display-unit">{product.unit}</span></span>
          </div>

          {product.variants && (
            <div class="variant-section">
              <label>Miktar Se√ßin:</label>
              <div class="variant-buttons" id="variant-buttons">
                {product.variants.map((variant: any, index: number) => (
                  <button
                    type="button"
                    class={`variant-btn ${index === 0 ? 'active' : ''}`}
                    data-value={variant.value}
                    data-label={variant.label}
                    data-price={variant.price}
                  >
                    {variant.label}
                    <span class="variant-price">{variant.price}‚Ç∫</span>
                  </button>
                ))}
              </div>
            </div>
          )}

          <div class="quantity-section">
            <label>Adet:</label>
            <div class="quantity-controls">
              <button type="button" id="decrease-qty" class="qty-btn">-</button>
              <input type="number" id="quantity" value="1" min="1" readonly />
              <button type="button" id="increase-qty" class="qty-btn">+</button>
            </div>
          </div>

          <div class="total-price">
            <span>Toplam:</span>
            <span id="total-price" class="total-value">{product.price}‚Ç∫</span>
          </div>

          <button id="add-to-cart-btn" class="btn btn-primary btn-full btn-large">
            <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            Sepete Ekle
          </button>

          {product.features && product.features.length > 0 && (
            <div class="product-features">
              <h3>√úr√ºn √ñzellikleri:</h3>
              <ul>
                {product.features.map((feature: string) => (
                  <li>
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    {feature}
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div class="info-cards">
            <div class="info-card">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
              </svg>
              <div>
                <h4>√úcretsiz Kargo</h4>
                <p>1000‚Ç∫ √ºzeri sipari≈ülerde</p>
              </div>
            </div>
            <div class="info-card">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              <div>
                <h4>G√ºvenli √ñdeme</h4>
                <p>256-bit SSL sertifikasƒ±</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {relatedProducts && relatedProducts.length > 0 && (
        <div class="related-products">
          <h2>Benzer √úr√ºnler</h2>
          <div class="related-grid">
            {relatedProducts.map((item: any) => {
              const relatedImages = parseImageArray(item.images);
              return (
                <a href={`/urun/${item.slug}`} class="related-item">
                  <img
                    src={relatedImages[0]}
                    alt={item.name}
                    onerror="console.error('‚ùå Related image failed:', this.src);"
                  />
                  <h4>{item.name}</h4>
                  <p class="related-price">{item.price}‚Ç∫ / {item.unit}</p>
                </a>
              );
            })}
          </div>
        </div>
      )}
    </div>
  </section>

  <Footer slot="footer" />
</BaseLayout>

<style>
  /* √ñnceki t√ºm CSS kodlarƒ± aynƒ± kalacak */
  .product-detail {
    padding: 2rem 1rem 4rem;
    background: var(--bg-light);
  }

  .breadcrumb {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
    margin-bottom: 2rem;
    font-size: 0.875rem;
    color: var(--text-gray);
  }

  .breadcrumb a {
    color: var(--primary);
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .product-layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    background: white;
    border-radius: var(--radius-lg);
    padding: 2rem;
    box-shadow: 0 4px 12px var(--shadow);
    margin-bottom: 3rem;
  }

  .product-gallery {
    position: sticky;
    top: 100px;
    align-self: start;
  }

  .main-image {
    border-radius: var(--radius-md);
    overflow: hidden;
    background: var(--bg-light);
    margin-bottom: 1rem;
  }

  .main-image img {
    width: 100%;
    height: auto;
    display: block;
  }

  .thumbnail-images {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    gap: 0.75rem;
  }

  .thumbnail-btn {
    width: 100%;
    height: 80px;
    padding: 0;
    border: 2px solid transparent;
    border-radius: var(--radius-sm);
    background: none;
    cursor: pointer;
    transition: all 0.3s;
    overflow: hidden;
    position: relative;
  }

  .thumbnail-btn:hover {
    border-color: var(--primary);
  }

  .thumbnail-btn.active {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(8, 145, 178, 0.2);
  }

  .thumbnail-btn img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* ... Diƒüer t√ºm CSS kodlarƒ± aynƒ± ... */
</style>

<script>
  console.log('üéØ Product page script loaded');

  // Thumbnail click events
  const thumbnailBtns = document.querySelectorAll('.thumbnail-btn');
  console.log('üì∏ Thumbnail buttons found:', thumbnailBtns.length);

  thumbnailBtns.forEach((btn, index) => {
    const imageUrl = btn.getAttribute('data-image');
    console.log(`Thumbnail ${index + 1}:`, imageUrl);

    btn.addEventListener('click', function() {
      console.log('üñ±Ô∏è Clicked thumbnail:', index + 1);

      const mainImage = document.getElementById('main-product-image') as HTMLImageElement;
      const currentUrlDisplay = document.getElementById('current-image-url');

      if (mainImage && imageUrl) {
        console.log('üîÑ Changing main image to:', imageUrl);
        mainImage.src = imageUrl;
        if (currentUrlDisplay) {
          currentUrlDisplay.textContent = imageUrl;
        }
      }

      // Update active state
      thumbnailBtns.forEach(b => b.classList.remove('active'));
      this.classList.add('active');
      console.log('‚úÖ Thumbnail activated:', index + 1);
    });
  });
</script>

<script define:vars={{ product, productImages }}>
  console.log('üíæ Product data:', { name: product.name, images: productImages });

  let selectedVariant = product.variants ? product.variants[0] : null;
  let quantity = 1;

  // Variant selection
  document.querySelectorAll('.variant-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      selectedVariant = {
        value: parseFloat(btn.dataset.value),
        label: btn.dataset.label,
        price: parseFloat(btn.dataset.price)
      };

      updateDisplay();
    });
  });

  // Quantity controls
  document.getElementById('increase-qty')?.addEventListener('click', () => {
    quantity++;
    document.getElementById('quantity').value = quantity;
    updateDisplay();
  });

  document.getElementById('decrease-qty')?.addEventListener('click', () => {
    if (quantity > 1) {
      quantity--;
      document.getElementById('quantity').value = quantity;
      updateDisplay();
    }
  });

  function updateDisplay() {
    const unitPrice = selectedVariant ? selectedVariant.price : product.price;
    const total = unitPrice * quantity;

    document.getElementById('display-price').textContent = unitPrice + '‚Ç∫';
    document.getElementById('display-unit').textContent = selectedVariant ? selectedVariant.label : product.unit;
    document.getElementById('total-price').textContent = total.toFixed(2) + '‚Ç∫';
  }

  // Add to cart
  document.getElementById('add-to-cart-btn')?.addEventListener('click', () => {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');

    const cartItem = {
      id: product.id,
      name: `${product.name} - ${selectedVariant ? selectedVariant.label : product.unit}`,
      price: selectedVariant ? selectedVariant.price : product.price,
      image: productImages[0],
      unit: selectedVariant ? selectedVariant.label : product.unit,
      quantity: quantity
    };

    const existingIndex = cart.findIndex(item =>
      item.id === product.id && item.unit === cartItem.unit
    );

    if (existingIndex >= 0) {
      cart[existingIndex].quantity += quantity;
    } else {
      cart.push(cartItem);
    }

    localStorage.setItem('cart', JSON.stringify(cart));
    window.dispatchEvent(new Event('cartUpdated'));

    const btn = document.getElementById('add-to-cart-btn');
    btn.innerHTML = '‚úì Sepete Eklendi!';
    btn.style.background = '#10b981';

    setTimeout(() => {
      window.location.href = '/sepet';
    }, 1200);
  });
</script>