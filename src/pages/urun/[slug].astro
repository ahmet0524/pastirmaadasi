---
import { supabaseAdmin } from '../../lib/supabase';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

export async function getStaticPaths() {
  const { data: products } = await supabaseAdmin
    .from('products')
    .select('slug')
    .eq('is_active', true);

  if (!products || products.length === 0) {
    return [];
  }

  return products.map(product => ({
    params: { slug: product.slug }
  }));
}

const { slug } = Astro.params;

const { data: product, error } = await supabaseAdmin
  .from('products')
  .select('*')
  .eq('slug', slug)
  .eq('is_active', true)
  .single();

if (error || !product) {
  return Astro.redirect('/404');
}

function parseImages(imgs: any): string[] {
  if (!imgs) return ['/assets/image/placeholder.jpg'];

  if (Array.isArray(imgs)) {
    return imgs.length > 0 ? imgs : ['/assets/image/placeholder.jpg'];
  }

  if (typeof imgs === 'string') {
    if (imgs.startsWith('{') && imgs.endsWith('}')) {
      const paths = imgs.slice(1, -1).split(',').map(p => p.trim().replace(/^"|"$/g, '').replace(/""/g, '"'));
      return paths.length > 0 ? paths : ['/assets/image/placeholder.jpg'];
    }

    if (imgs.startsWith('[')) {
      try {
        const parsed = JSON.parse(imgs.replace(/""/g, '"'));
        return Array.isArray(parsed) && parsed.length > 0 ? parsed : ['/assets/image/placeholder.jpg'];
      } catch (e) {
        return ['/assets/image/placeholder.jpg'];
      }
    }

    return [imgs];
  }

  return ['/assets/image/placeholder.jpg'];
}

const productImages = parseImages(product.images);

const { data: relatedProducts } = await supabaseAdmin
  .from('products')
  .select('id, slug, name, price, unit, images')
  .eq('category', product.category)
  .eq('is_active', true)
  .neq('id', product.id)
  .limit(4);

// Pastırma için varsayılan açıklama
const pastirmaDescription = `Kayseri pastırmasının lezzeti yöreye özeldir. ${product.name} yerli kesim büyükbaş hayvanların ${product.name.toLowerCase().includes('antrikot') ? 'antrikot' : product.name.toLowerCase().includes('sırt') ? 'sırt' : product.name.toLowerCase().includes('tütünlük') ? 'tütünlük' : 'potuk'} etinin yağlı, yumuşak ve lezzetli bölümünden elde edilir.

Özenle çıkarılan etin saklama, tuzlama ve 1.kalite baharatlarla hazırlanan çemenle kaplanarak dinlendirilmesiyle üretilir. Bu işlem ortalama 3 hafta sürmektedir.

Pastırmamız bu işe özel pastırma bıçağı ile özenle ve ince bir şekilde doğranır. (Makine ile doğranan pastırmanın lezzeti bıçağın ısınmasıyla bozulur.) Doğranan pastırma 250 gr, 500 gr, 1 kg'lık kutularda paketlenir ve vakumlanır.

Mevsim koşullarına uygun olarak kargoya verilir. Vakumlu ambalajdan çıkarılan pastırmanın 1 saat havalandırılmasını, daha sonra buzdolabında veya derin dondurucuda (uzun süreli muhafaza istenirse) muhafaza edilmesini tavsiye ediyoruz.

Çiğ olarak veya kısık ateşte bir miktar su ile pişirilerek tüketilebilir.

Afiyet olsun.`;
---

<BaseLayout title={product.name} description={product.description || pastirmaDescription.substring(0, 160)}>
  <Header slot="header" />

  <section class="product-detail">
    <div class="container">
      <nav class="breadcrumb">
        <a href="/">Ana Sayfa</a>
        <span>/</span>
        <a href="/online-alisveris">Online Alışveriş</a>
        <span>/</span>
        <a href={`/pastirma`}>{product.category}</a>
        <span>/</span>
        <span>{product.name}</span>
      </nav>

      <div class="product-layout">
        <!-- Sol: Fotoğraf Galerisi (Swipe) -->
        <div class="product-gallery">
          <div class="gallery-main">
            <div class="swiper-container">
              {productImages.map((img: string, index: number) => (
                <div class={`swiper-slide ${index === 0 ? 'active' : ''}`}>
                  <img src={img} alt={`${product.name} - ${index + 1}`} />
                </div>
              ))}
            </div>

            {productImages.length > 1 && (
              <>
                <button class="swiper-btn swiper-prev" aria-label="Önceki">
                  <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
                <button class="swiper-btn swiper-next" aria-label="Sonraki">
                  <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </button>
                <div class="swiper-pagination">
                  {productImages.map((_, index: number) => (
                    <button class={`pagination-dot ${index === 0 ? 'active' : ''}`} data-index={index}></button>
                  ))}
                </div>
              </>
            )}
          </div>

          {productImages.length > 1 && (
            <div class="gallery-thumbnails">
              {productImages.map((img: string, index: number) => (
                <button
                  type="button"
                  class={`thumbnail-btn ${index === 0 ? 'active' : ''}`}
                  data-index={index}
                >
                  <img src={img} alt={`${product.name} - ${index + 1}`} />
                </button>
              ))}
            </div>
          )}
        </div>

        <!-- Sağ: Ürün Bilgileri -->
        <div class="product-content">
          <div class="product-header">
            <span class="product-category">{product.category}</span>
            <h1>{product.name}</h1>
            <div class="product-rating">
              <div class="stars">★★★★★</div>
              <span class="review-count">(24 değerlendirme)</span>
            </div>
          </div>

          <div class="price-section">
            <div class="price-main">
              <span id="display-price" class="price-value">{product.price}₺</span>
              <span class="price-unit">/ <span id="display-unit">{product.unit}</span></span>
            </div>
          </div>

          {product.variants && (
            <div class="variant-section">
              <label>Miktar Seçin:</label>
              <div class="variant-buttons" id="variant-buttons">
                {product.variants.map((variant: any, index: number) => (
                  <button
                    type="button"
                    class={`variant-btn ${index === 0 ? 'active' : ''}`}
                    data-value={variant.value}
                    data-label={variant.label}
                    data-price={variant.price}
                  >
                    <span class="variant-label">{variant.label}</span>
                    <span class="variant-price">{variant.price}₺</span>
                  </button>
                ))}
              </div>
            </div>
          )}

          <div class="quantity-section">
            <label>Adet:</label>
            <div class="quantity-controls">
              <button type="button" id="decrease-qty" class="qty-btn">-</button>
              <input type="number" id="quantity" value="1" min="1" readonly />
              <button type="button" id="increase-qty" class="qty-btn">+</button>
            </div>
          </div>

          <div class="total-price">
            <span>Toplam:</span>
            <span id="total-price" class="total-value">{product.price}₺</span>
          </div>

          <div class="action-buttons">
            <button id="add-to-cart-btn" class="btn btn-primary btn-full">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
              Sepete Ekle
            </button>
          </div>

          <!-- Success Message (Hidden) -->
          <div id="cart-success" class="cart-success-message" style="display: none;">
            <div class="success-content">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              <span>Ürün sepete eklendi!</span>
            </div>
            <div class="success-actions">
              <button id="continue-shopping" class="btn btn-outline-sm">Alışverişe Devam Et</button>
              <button id="go-to-cart" class="btn btn-primary-sm">Sepete Git</button>
            </div>
          </div>

          {product.features && product.features.length > 0 && (
            <div class="product-features">
              <h3>Ürün Özellikleri:</h3>
              <ul>
                {product.features.map((feature: string) => (
                  <li>
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    {feature}
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div class="info-cards">
            <div class="info-card">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
              </svg>
              <div>
                <h4>Ücretsiz Kargo</h4>
                <p>1000₺ üzeri siparişlerde</p>
              </div>
            </div>
            <div class="info-card">
              <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              <div>
                <h4>Güvenli Ödeme</h4>
                <p>256-bit SSL sertifikası</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Ürün Açıklaması -->
      <div class="product-description-section">
        <h2>Ürün Açıklaması</h2>
        <div class="description-content">
          {product.category === 'Pastırma' ? (
            <p style="white-space: pre-line;">{pastirmaDescription}</p>
          ) : (
            <p>{product.description}</p>
          )}
        </div>
      </div>

      <!-- İlgili Ürünler -->
      {relatedProducts && relatedProducts.length > 0 && (
        <div class="related-products">
          <h2>Benzer Ürünler</h2>
          <div class="related-grid">
            {relatedProducts.map((item: any) => {
              const relatedImages = parseImages(item.images);
              return (
                <a href={`/urun/${item.slug}`} class="related-item">
                  <img src={relatedImages[0]} alt={item.name} />
                  <h4>{item.name}</h4>
                  <p class="related-price">{item.price}₺ / {item.unit}</p>
                </a>
              );
            })}
          </div>
        </div>
      )}
    </div>
  </section>

  <Footer slot="footer" />
</BaseLayout>

<style>
  .product-detail {
    padding: 2rem 1rem 4rem;
    background: var(--bg-light);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .breadcrumb {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
    margin-bottom: 2rem;
    font-size: 0.875rem;
    color: var(--text-gray);
  }

  .breadcrumb a {
    color: var(--primary);
    transition: opacity 0.3s;
  }

  .breadcrumb a:hover {
    opacity: 0.7;
  }

  .product-layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    background: white;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin-bottom: 3rem;
  }

  /* Swipe Gallery */
  .product-gallery {
    position: sticky;
    top: 100px;
    align-self: start;
  }

  .gallery-main {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    background: var(--bg-light);
    margin-bottom: 1rem;
  }

  .swiper-container {
    position: relative;
    width: 100%;
    padding-top: 100%;
  }

  .swiper-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.5s ease, visibility 0.5s ease;
  }

  .swiper-slide.active {
    opacity: 1;
    visibility: visible;
  }

  .swiper-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .swiper-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 48px;
    height: 48px;
    background: rgba(255, 255, 255, 0.95);
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .swiper-btn:hover {
    background: white;
    transform: translateY(-50%) scale(1.1);
  }

  .swiper-prev {
    left: 1rem;
  }

  .swiper-next {
    right: 1rem;
  }

  .swiper-pagination {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
    z-index: 10;
  }

  .pagination-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .pagination-dot.active {
    background: white;
    width: 24px;
    border-radius: 5px;
  }

  .gallery-thumbnails {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    gap: 0.75rem;
  }

  .thumbnail-btn {
    width: 100%;
    height: 80px;
    padding: 0;
    border: 2px solid transparent;
    border-radius: 8px;
    background: none;
    cursor: pointer;
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .thumbnail-btn:hover,
  .thumbnail-btn.active {
    border-color: var(--primary);
  }

  .thumbnail-btn img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  /* Product Content */
  .product-header {
    margin-bottom: 2rem;
  }

  .product-category {
    display: inline-block;
    font-size: 0.75rem;
    color: var(--primary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }

  .product-content h1 {
    font-size: 2rem;
    margin: 0 0 1rem 0;
    color: var(--text-dark);
    line-height: 1.3;
  }

  .product-rating {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .stars {
    color: #fbbf24;
    font-size: 1.125rem;
  }

  .review-count {
    color: var(--text-gray);
    font-size: 0.875rem;
  }

  .price-section {
    padding: 1.5rem;
    background: var(--bg-light);
    border-radius: 12px;
    margin-bottom: 2rem;
  }

  .price-main {
    display: flex;
    align-items: baseline;
    gap: 0.5rem;
  }

  .price-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--primary);
  }

  .price-unit {
    font-size: 1.125rem;
    color: var(--text-gray);
  }

  .variant-section,
  .quantity-section {
    margin-bottom: 2rem;
  }

  .variant-section label,
  .quantity-section label {
    display: block;
    font-weight: 700;
    margin-bottom: 1rem;
    color: var(--text-dark);
  }

  .variant-buttons {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 0.75rem;
  }

  .variant-btn {
    padding: 1rem;
    border: 2px solid var(--border-color);
    border-radius: 12px;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }

  .variant-btn:hover {
    border-color: var(--primary);
    transform: translateY(-2px);
  }

  .variant-btn.active {
    border-color: var(--primary);
    background: var(--primary-light);
    color: var(--primary);
  }

  .variant-label {
    font-weight: 600;
    font-size: 1rem;
  }

  .variant-price {
    font-size: 0.875rem;
    color: var(--primary);
    font-weight: 700;
  }

  .quantity-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .qty-btn {
    width: 48px;
    height: 48px;
    border: 2px solid var(--border-color);
    border-radius: 12px;
    background: white;
    font-size: 1.5rem;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s ease;
    color: var(--primary);
  }

  .qty-btn:hover {
    border-color: var(--primary);
    background: var(--primary-light);
  }

  #quantity {
    width: 80px;
    height: 48px;
    text-align: center;
    font-size: 1.25rem;
    font-weight: 700;
    border: 2px solid var(--border-color);
    border-radius: 12px;
  }

  .total-price {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    background: var(--bg-light);
    border-radius: 12px;
    margin-bottom: 2rem;
  }

  .total-price span:first-child {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-dark);
  }

  .total-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary);
  }

  .action-buttons {
    margin-bottom: 2rem;
  }

  .btn-full {
    width: 100%;
    padding: 1.125rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    font-size: 1.125rem;
  }

  .cart-success-message {
    padding: 1.5rem;
    background: linear-gradient(135deg, #10b981, #059669);
    border-radius: 12px;
    margin-bottom: 2rem;
    animation: slideDown 0.4s ease;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .success-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: white;
    font-weight: 600;
    font-size: 1.125rem;
    margin-bottom: 1rem;
  }

  .success-content svg {
    flex-shrink: 0;
  }

  .success-actions {
    display: flex;
    gap: 1rem;
  }

  .btn-outline-sm,
  .btn-primary-sm {
    flex: 1;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-outline-sm {
    background: transparent;
    border: 2px solid white;
    color: white;
  }

  .btn-outline-sm:hover {
    background: white;
    color: var(--primary);
  }

  .btn-primary-sm {
    background: white;
    border: 2px solid white;
    color: var(--primary);
  }

  .btn-primary-sm:hover {
    background: rgba(255, 255, 255, 0.9);
    transform: translateY(-2px);
  }

  .product-features {
    margin: 2rem 0;
    padding: 2rem;
    background: var(--bg-light);
    border-radius: 12px;
  }

  .product-features h3 {
    font-size: 1.25rem;
    margin-bottom: 1rem;
    color: var(--text-dark);
  }

  .product-features ul {
    list-style: none;
    padding: 0;
    display: grid;
    gap: 0.75rem;
  }

  .product-features li {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--text-gray);
  }

  .product-features li svg {
    color: #10b981;
    flex-shrink: 0;
  }

  .info-cards {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .info-card {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .info-card:hover {
    border-color: var(--primary);
    background: var(--bg-light);
  }

  .info-card svg {
    color: var(--primary);
    flex-shrink: 0;
  }

  .info-card h4 {
    font-size: 0.875rem;
    margin: 0 0 0.25rem 0;
    color: var(--text-dark);
  }

  .info-card p {
    font-size: 0.75rem;
    color: var(--text-gray);
    margin: 0;
  }

  /* Product Description */
  .product-description-section {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin-bottom: 3rem;
  }

  .product-description-section h2 {
    font-size: 1.75rem;
    margin-bottom: 1.5rem;
    color: var(--text-dark);
  }

  .description-content {
    color: var(--text-gray);
    line-height: 1.8;
    font-size: 1.0625rem;
  }

  .description-content p {
    margin-bottom: 1rem;
  }

  /* Related Products */
  .related-products {
    margin-top: 4rem;
  }

  .related-products h2 {
    font-size: 2rem;
    margin-bottom: 2rem;
    text-align: center;
    color: var(--text-dark);
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    gap: 1.5rem;
  }

  .related-item {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    text-decoration: none;
    color: inherit;
  }

  .related-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  }

  .related-item img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .related-item h4 {
    padding: 1rem 1rem 0.5rem;
    font-size: 1rem;
    color: var(--text-dark);
  }

  .related-price {
    padding: 0 1rem 1rem;
    font-weight: 700;
    color: var(--primary);
    margin: 0;
  }

  @media (max-width: 1024px) {
    .product-layout {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .product-gallery {
      position: relative;
      top: 0;
    }

    .info-cards {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .product-content h1 {
      font-size: 1.5rem;
    }

    .price-value {
      font-size: 2rem;
    }

    .variant-buttons {
      grid-template-columns: repeat(2, 1fr);
    }

    .related-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .success-actions {
      flex-direction: column;
    }
  }
</style>

<script define:vars={{ product, productImages }}>
  // Swiper functionality
  let currentSlide = 0;
  const slides = document.querySelectorAll('.swiper-slide');
  const dots = document.querySelectorAll('.pagination-dot');
  const thumbnails = document.querySelectorAll('.thumbnail-btn');

  function showSlide(index) {
    slides.forEach(slide => slide.classList.remove('active'));
    dots.forEach(dot => dot.classList.remove('active'));
    thumbnails.forEach(thumb => thumb.classList.remove('active'));

    currentSlide = (index + slides.length) % slides.length;
    slides[currentSlide]?.classList.add('active');
    dots[currentSlide]?.classList.add('active');
    thumbnails[currentSlide]?.classList.add('active');
  }

  document.querySelector('.swiper-next')?.addEventListener('click', () => {
    showSlide(currentSlide + 1);
  });

  document.querySelector('.swiper-prev')?.addEventListener('click', () => {
    showSlide(currentSlide - 1);
  });

  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => showSlide(index));
  });

  thumbnails.forEach((thumb, index) => {
    thumb.addEventListener('click', () => showSlide(index));
  });

  // Touch swipe support
  let touchStartX = 0;
  let touchEndX = 0;

  const swiperContainer = document.querySelector('.swiper-container');
  swiperContainer?.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  });

  swiperContainer?.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    if (touchStartX - touchEndX > 50) {
      showSlide(currentSlide + 1);
    } else if (touchEndX - touchStartX > 50) {
      showSlide(currentSlide - 1);
    }
  });

  // Product variants and cart
  let selectedVariant = product.variants ? product.variants[0] : null;
  let quantity = 1;

  document.querySelectorAll('.variant-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      selectedVariant = {
        value: parseFloat(btn.dataset.value),
        label: btn.dataset.label,
        price: parseFloat(btn.dataset.price)
      };

      updateDisplay();
    });
  });

  document.getElementById('increase-qty')?.addEventListener('click', () => {
    quantity++;
    document.getElementById('quantity').value = quantity;
    updateDisplay();
  });

  document.getElementById('decrease-qty')?.addEventListener('click', () => {
    if (quantity > 1) {
      quantity--;
      document.getElementById('quantity').value = quantity;
      updateDisplay();
    }
  });

  function updateDisplay() {
    const unitPrice = selectedVariant ? selectedVariant.price : product.price;
    const total = unitPrice * quantity;

    document.getElementById('display-price').textContent = unitPrice + '₺';
    document.getElementById('display-unit').textContent = selectedVariant ? selectedVariant.label : product.unit;
    document.getElementById('total-price').textContent = total.toFixed(2) + '₺';
  }

  document.getElementById('add-to-cart-btn')?.addEventListener('click', () => {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');

    const cartItem = {
      id: product.id,
      name: `${product.name} - ${selectedVariant ? selectedVariant.label : product.unit}`,
      price: selectedVariant ? selectedVariant.price : product.price,
      image: productImages[0],
      unit: selectedVariant ? selectedVariant.label : product.unit,
      quantity: quantity
    };

    const existingIndex = cart.findIndex(item =>
      item.id === product.id && item.unit === cartItem.unit
    );

    if (existingIndex >= 0) {
      cart[existingIndex].quantity += quantity;
    } else {
      cart.push(cartItem);
    }

    localStorage.setItem('cart', JSON.stringify(cart));
    window.dispatchEvent(new Event('cartUpdated'));

    // Show success message
    const successMsg = document.getElementById('cart-success');
    const addBtn = document.getElementById('add-to-cart-btn');

    addBtn.style.display = 'none';
    successMsg.style.display = 'block';

    // Scroll to success message
    successMsg.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  });

  document.getElementById('continue-shopping')?.addEventListener('click', () => {
    const successMsg = document.getElementById('cart-success');
    const addBtn = document.getElementById('add-to-cart-btn');

    successMsg.style.display = 'none';
    addBtn.style.display = 'flex';
  });

  document.getElementById('go-to-cart')?.addEventListener('click', () => {
    window.location.href = '/sepet';
  });
</script>