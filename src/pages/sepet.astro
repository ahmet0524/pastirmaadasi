// src/pages/sepet.astro
---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<BaseLayout title="Sepetim" description="Alƒ±≈üveri≈ü sepetinizi g√∂r√ºnt√ºleyin ve sipari≈ü verin">
  <Header slot="header" />

  <section class="cart-page">
    <div class="container">
      <h1>üõí Sepetim</h1>

      <div class="cart-layout">
        <div class="cart-items-section">
          <div id="cart-items" class="cart-items"></div>

          <div id="empty-cart" class="empty-cart hidden">
            <svg width="96" height="96" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
            <h3>Sepetiniz Bo≈ü</h3>
            <p>Alƒ±≈üveri≈üe ba≈ülamak i√ßin √ºr√ºnlerimize g√∂z atƒ±n</p>
            <a href="/online-alisveris" class="btn btn-primary btn-large">Alƒ±≈üveri≈üe Ba≈üla</a>
          </div>
        </div>

        <div class="cart-summary">
          <div class="summary-card">
            <h2>üìã Sipari≈ü √ñzeti</h2>

            <!-- M√º≈üteri Bilgileri Formu -->
            <div class="customer-info-section">
              <h3>üìß ƒ∞leti≈üim Bilgileri</h3>
              <div class="form-group">
                <label for="buyer-email">E-posta *</label>
                <input
                  type="email"
                  id="buyer-email"
                  placeholder="ornek@mail.com"
                  required
                />
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="buyer-name">Ad *</label>
                  <input
                    type="text"
                    id="buyer-name"
                    placeholder="Adƒ±nƒ±z"
                    required
                  />
                </div>
                <div class="form-group">
                  <label for="buyer-surname">Soyad *</label>
                  <input
                    type="text"
                    id="buyer-surname"
                    placeholder="Soyadƒ±nƒ±z"
                    required
                  />
                </div>
              </div>
            </div>

            <!-- Kupon B√∂l√ºm√º -->
            <div class="coupon-section">
              <label for="coupon-input">üéüÔ∏è ƒ∞ndirim Kuponu</label>
              <div class="coupon-input-group">
                <input
                  type="text"
                  id="coupon-input"
                  placeholder="Kupon kodunuz"
                />
                <button id="apply-coupon" class="btn btn-secondary">Uygula</button>
              </div>
              <p id="coupon-message" class="coupon-message hidden"></p>
            </div>

            <!-- Fiyat √ñzeti -->
            <div class="summary-details">
              <div class="summary-row">
                <span>Ara Toplam</span>
                <span id="subtotal">0‚Ç∫</span>
              </div>
              <div class="summary-row">
                <span>Kargo</span>
                <span id="shipping">0‚Ç∫</span>
              </div>
              <div id="discount-row" class="summary-row discount-row hidden">
                <span>ƒ∞ndirim</span>
                <span id="discount">0‚Ç∫</span>
              </div>
            </div>

            <div class="summary-total">
              <span>Toplam</span>
              <span id="total">0‚Ç∫</span>
            </div>

            <button id="checkout-btn" class="btn btn-primary btn-full btn-large" disabled>
              <span id="checkout-btn-text">üí≥ √ñdemeye Ge√ß</span>
            </button>

            <a href="/online-alisveris" class="continue-shopping">
              ‚Üê Alƒ±≈üveri≈üe Devam Et
            </a>

            <div class="summary-info">
              <p>
                <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
                1000‚Ç∫ √ºzeri √ºcretsiz kargo
              </p>
              <p>
                <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                </svg>
                G√ºvenli √∂deme garantisi
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <Footer slot="footer" />
</BaseLayout>

<style>
  .cart-page {
    min-height: 100vh;
    padding: 3rem 1rem;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .cart-page h1 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    color: #1f2937;
    text-align: center;
  }

  .cart-layout {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }

  .cart-items {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .cart-item {
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    padding: 2rem;
    display: grid;
    grid-template-columns: 140px 1fr auto;
    gap: 2rem;
    align-items: center;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .cart-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.12);
  }

  .cart-item-image {
    width: 140px;
    height: 140px;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .cart-item-info h3 {
    font-size: 1.375rem;
    margin-bottom: 0.75rem;
    color: #1f2937;
    font-weight: 700;
  }

  .cart-item-price {
    color: #dc2626;
    font-weight: bold;
    font-size: 1.125rem;
    margin-bottom: 1.25rem;
  }

  /* üéØ YENƒ∞: Daha B√ºy√ºk Quantity Controls */
  .quantity-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    background: #f3f4f6;
    padding: 0.5rem 1rem;
    border-radius: 12px;
    width: fit-content;
  }

  .qty-btn {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    background: white;
    color: #1f2937;
    font-weight: bold;
    font-size: 1.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid #e5e7eb;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .qty-btn:hover {
    background: #dc2626;
    color: white;
    border-color: #dc2626;
    transform: scale(1.1);
  }

  .qty-btn:active {
    transform: scale(0.95);
  }

  .qty-amount {
    font-weight: bold;
    font-size: 1.375rem;
    min-width: 50px;
    text-align: center;
    color: #1f2937;
  }

  .cart-item-actions {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 1.5rem;
  }

  .remove-btn {
    background: #fee2e2;
    border: none;
    color: #ef4444;
    padding: 0.75rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .remove-btn:hover {
    background: #ef4444;
    color: white;
    transform: scale(1.1);
  }

  .cart-item-total {
    font-size: 1.5rem;
    font-weight: bold;
    color: #dc2626;
  }

  .empty-cart {
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    padding: 5rem 2rem;
    text-align: center;
  }

  .empty-cart svg {
    margin: 0 auto 1.5rem;
    color: #d1d5db;
  }

  .empty-cart h3 {
    font-size: 2rem;
    color: #6b7280;
    margin-bottom: 0.75rem;
  }

  .empty-cart p {
    color: #9ca3af;
    margin-bottom: 2rem;
    font-size: 1.125rem;
  }

  .btn {
    padding: 0.875rem 1.75rem;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    text-decoration: none;
    display: inline-block;
    font-size: 1rem;
  }

  .btn-primary {
    background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);
  }

  .btn-primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
  }

  .btn-primary:disabled {
    background: #d1d5db;
    cursor: not-allowed;
    box-shadow: none;
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
  }

  .btn-secondary:hover {
    background: #4b5563;
  }

  .btn-full {
    width: 100%;
  }

  .btn-large {
    padding: 1.125rem 2rem;
    font-size: 1.125rem;
  }

  .cart-summary {
    position: sticky;
    top: 100px;
  }

  .summary-card {
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    padding: 2rem;
  }

  .summary-card h2 {
    font-size: 1.75rem;
    margin-bottom: 1.5rem;
    color: #1f2937;
    font-weight: 700;
  }

  .summary-card h3 {
    font-size: 1.125rem;
    margin-bottom: 1rem;
    color: #1f2937;
    font-weight: 600;
  }

  .customer-info-section {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid #f3f4f6;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    font-weight: 600;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    color: #374151;
  }

  .form-group input {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.2s;
  }

  .form-group input:focus {
    outline: none;
    border-color: #dc2626;
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .coupon-section {
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid #f3f4f6;
  }

  .coupon-section label {
    display: block;
    font-weight: 600;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    color: #374151;
  }

  .coupon-input-group {
    display: flex;
    gap: 0.5rem;
  }

  .coupon-input-group input {
    flex: 1;
    padding: 0.875rem 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.2s;
  }

  .coupon-input-group input:focus {
    outline: none;
    border-color: #dc2626;
    box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
  }

  .coupon-message {
    margin-top: 0.75rem;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .coupon-message.success {
    color: #10b981;
  }

  .coupon-message.error {
    color: #ef4444;
  }

  .summary-details {
    padding: 1.5rem 0;
    border-bottom: 2px solid #f3f4f6;
    margin-bottom: 1.5rem;
  }

  .summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.875rem;
    color: #6b7280;
    font-size: 1rem;
  }

  .discount-row {
    color: #10b981;
    font-weight: 600;
  }

  .summary-total {
    display: flex;
    justify-content: space-between;
    font-size: 1.5rem;
    font-weight: bold;
    color: #dc2626;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: #fef2f2;
    border-radius: 10px;
  }

  .continue-shopping {
    display: block;
    text-align: center;
    color: #dc2626;
    margin-top: 1rem;
    text-decoration: none;
    font-weight: 600;
  }

  .continue-shopping:hover {
    color: #b91c1c;
    text-decoration: underline;
  }

  .summary-info {
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 2px solid #f3f4f6;
  }

  .summary-info p {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    font-size: 0.875rem;
    color: #6b7280;
  }

  .summary-info svg {
    color: #10b981;
    flex-shrink: 0;
  }

  .hidden {
    display: none !important;
  }

  @media (min-width: 1024px) {
    .cart-layout {
      grid-template-columns: 2fr 1fr;
    }
  }

  @media (max-width: 768px) {
    .cart-page h1 {
      font-size: 2rem;
    }

    .cart-item {
      grid-template-columns: 1fr;
      text-align: center;
      padding: 1.5rem;
    }

    .cart-item-image {
      margin: 0 auto;
    }

    .cart-item-actions {
      align-items: center;
      flex-direction: row;
      justify-content: space-between;
      width: 100%;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .quantity-controls {
      margin: 0 auto;
    }
  }
</style>

<script>
  interface CartItem {
    id: number;
    name: string;
    price: number;
    image: string;
    unit: string;
    quantity: number;
  }

  let cart: CartItem[] = [];
  let discountPercent = 0;

  const coupons: Record<string, number> = {
    'HOSGELDIN10': 10,
    'YENI15': 15,
    'KAYSER20': 20
  };

  function loadCart() {
    cart = JSON.parse(localStorage.getItem('cart') || '[]');
    renderCart();
    updateSummary();
  }

  function renderCart() {
    const cartContainer = document.getElementById('cart-items');
    const emptyCart = document.getElementById('empty-cart');
    const checkoutBtn = document.getElementById('checkout-btn') as HTMLButtonElement;

    if (!cartContainer || !emptyCart) return;

    if (cart.length === 0) {
      cartContainer.innerHTML = '';
      emptyCart.classList.remove('hidden');
      if (checkoutBtn) checkoutBtn.disabled = true;
      return;
    }

    emptyCart.classList.add('hidden');
    if (checkoutBtn) checkoutBtn.disabled = false;

    cartContainer.innerHTML = cart.map((item, index) => `
      <div class="cart-item">
        <div class="cart-item-image">
          <img src="${item.image}" alt="${item.name}">
        </div>
        <div class="cart-item-info">
          <h3>${item.name}</h3>
          <p class="cart-item-price">${item.price}‚Ç∫ / ${item.unit}</p>
          <div class="quantity-controls">
            <button class="qty-btn decrease-qty" data-index="${index}">‚àí</button>
            <span class="qty-amount">${item.quantity}</span>
            <button class="qty-btn increase-qty" data-index="${index}">+</button>
          </div>
        </div>
        <div class="cart-item-actions">
          <button class="remove-btn" data-index="${index}" title="Sepetten √áƒ±kar">
            <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
          <p class="cart-item-total">${(item.price * item.quantity).toFixed(2)}‚Ç∫</p>
        </div>
      </div>
    `).join('');

    attachCartEventListeners();
  }

  function attachCartEventListeners() {
    document.querySelectorAll('.increase-qty').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
        cart[index].quantity++;
        saveCart();
      });
    });

    document.querySelectorAll('.decrease-qty').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
        if (cart[index].quantity > 1) {
          cart[index].quantity--;
          saveCart();
        }
      });
    });

    document.querySelectorAll('.remove-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
        cart.splice(index, 1);
        saveCart();
      });
    });
  }

  function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
    updateSummary();
    window.dispatchEvent(new Event('cartUpdated'));
  }

  function updateSummary() {
    const subtotal = calculateSubtotal();
    const shipping = subtotal >= 1000 ? 0 : 50;
    const discount = (subtotal * discountPercent) / 100;
    const total = subtotal + shipping - discount;

    const subtotalEl = document.getElementById('subtotal');
    const shippingEl = document.getElementById('shipping');
    const discountEl = document.getElementById('discount');
    const discountRow = document.getElementById('discount-row');
    const totalEl = document.getElementById('total');

    if (subtotalEl) subtotalEl.textContent = `${subtotal.toFixed(2)}‚Ç∫`;
    if (shippingEl) shippingEl.textContent = shipping === 0 ? '√úcretsiz' : `${shipping}‚Ç∫`;
    if (discountEl) discountEl.textContent = `-${discount.toFixed(2)}‚Ç∫`;
    if (discountRow) discountRow.classList.toggle('hidden', discount === 0);
    if (totalEl) totalEl.textContent = `${total.toFixed(2)}‚Ç∫`;
  }

  function calculateSubtotal(): number {
    return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  }

  // Kupon uygulama
  document.getElementById('apply-coupon')?.addEventListener('click', () => {
    const input = document.getElementById('coupon-input') as HTMLInputElement;
    const message = document.getElementById('coupon-message');
    const code = input.value.trim().toUpperCase();

    if (!message) return;

    message.classList.remove('hidden', 'success', 'error');

    if (coupons[code]) {
      discountPercent = coupons[code];
      message.textContent = `‚úÖ Kupon uygulandƒ±! %${discountPercent} indirim`;
      message.classList.add('success');
      input.disabled = true;
      updateSummary();
    } else {
      message.textContent = '‚ùå Ge√ßersiz kupon kodu';
      message.classList.add('error');
    }
    message.classList.remove('hidden');
  });

  // ‚úÖ √ñNEMLƒ∞: localStorage'a email kaydet ve √∂demeye ge√ß
  document.getElementById('checkout-btn')?.addEventListener('click', async () => {
    if (cart.length === 0) return;

    const emailInput = document.getElementById('buyer-email') as HTMLInputElement;
    const nameInput = document.getElementById('buyer-name') as HTMLInputElement;
    const surnameInput = document.getElementById('buyer-surname') as HTMLInputElement;

    if (!emailInput.value || !nameInput.value || !surnameInput.value) {
      alert('L√ºtfen t√ºm bilgileri doldurun!');
      return;
    }

    // ‚ö†Ô∏è √ñNEMLƒ∞: Email'i localStorage'a kaydet
    localStorage.setItem('lastOrderEmail', emailInput.value);
    localStorage.setItem('lastOrderName', nameInput.value);
    localStorage.setItem('lastOrderSurname', surnameInput.value);

    console.log('üíæ Email localStorage\'a kaydedildi:', emailInput.value);

    const checkoutBtn = document.getElementById('checkout-btn') as HTMLButtonElement;
    const btnText = document.getElementById('checkout-btn-text');

    checkoutBtn.disabled = true;
    if (btnText) btnText.textContent = '‚è≥ √ñdeme hazƒ±rlanƒ±yor...';

    try {
      const subtotal = calculateSubtotal();
      const shipping = subtotal >= 1000 ? 0 : 50;
      const discount = (subtotal * discountPercent) / 100;
      const total = subtotal + shipping - discount;

      const basketItems = cart.map((item, index) => ({
        id: `BI${index + 1}`,
        name: item.name,
        category1: 'Et √úr√ºnleri',
        itemType: 'PHYSICAL',
        price: (item.price * item.quantity).toFixed(2),
      }));

      const paymentData = {
        price: total.toFixed(2),
        paidPrice: total.toFixed(2),
        buyer: {
          id: 'BY' + Date.now(),
          name: nameInput.value,
          surname: surnameInput.value,
          email: emailInput.value,
          identityNumber: '11111111111',
          registrationAddress: 'Kayseri, T√ºrkiye',
          ip: '85.34.78.112',
          city: 'Kayseri',
          country: 'Turkey',
        },
        shippingAddress: {
          contactName: `${nameInput.value} ${surnameInput.value}`,
          city: 'Kayseri',
          country: 'Turkey',
          address: 'Kayseri, T√ºrkiye',
        },
        billingAddress: {
          contactName: `${nameInput.value} ${surnameInput.value}`,
          city: 'Kayseri',
          country: 'Turkey',
          address: 'Kayseri, T√ºrkiye',
        },
        basketItems: basketItems,
      };

      console.log('üì§ √ñdeme verisi g√∂nderiliyor:', paymentData);

      const response = await fetch('/api/create-payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(paymentData),
      });

      const data = await response.json();
      console.log('üì• API yanƒ±tƒ±:', data);

      if (data.status === 'success' && data.paymentPageUrl) {
        window.location.href = data.paymentPageUrl;
      } else {
        alert(data.errorMessage || '√ñdeme ba≈ülatƒ±lamadƒ±!');
        checkoutBtn.disabled = false;
        if (btnText) btnText.textContent = 'üí≥ √ñdemeye Ge√ß';
      }
    } catch (error) {
      console.error('‚ùå √ñdeme hatasƒ±:', error);
      alert('Sunucu hatasƒ±. L√ºtfen daha sonra tekrar deneyin.');
      checkoutBtn.disabled = false;
      if (btnText) btnText.textContent = 'üí≥ √ñdemeye Ge√ß';
    }
  });

  document.addEventListener('DOMContentLoaded', loadCart);
</script>