---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<BaseLayout title="Sepetim" description="Alışveriş sepetinizi görüntüleyin ve sipariş verin">
  <Header slot="header" />

  <section class="cart-page">
    <div class="container">
      <h1>🛒 Sepetim</h1>

      <div class="cart-layout">
        <div class="cart-items-section">
          <div id="cart-items" class="cart-items"></div>

          <div id="empty-cart" class="empty-cart hidden">
            <svg width="96" height="96" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
            <h3>Sepetiniz Boş</h3>
            <p>Alışverişe başlamak için ürünlerimize göz atın</p>
            <a href="/online-alisveris" class="btn btn-primary btn-large">Alışverişe Başla</a>
          </div>
        </div>

        <div class="cart-summary">
          <div class="summary-card">
            <h2>📋 Sipariş Özeti</h2>

            <!-- Müşteri Bilgileri -->
            <div class="customer-info-section">
              <h3>📧 İletişim Bilgileri</h3>
              <div class="form-group">
                <label for="buyer-email">E-posta *</label>
                <input type="email" id="buyer-email" placeholder="ornek@mail.com" required />
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="buyer-name">Ad *</label>
                  <input type="text" id="buyer-name" placeholder="Adınız" required />
                </div>
                <div class="form-group">
                  <label for="buyer-surname">Soyad *</label>
                  <input type="text" id="buyer-surname" placeholder="Soyadınız" required />
                </div>
              </div>
            </div>

            <!-- Kupon -->
            <div class="coupon-section">
              <label for="coupon-input">🎟️ İndirim Kuponu</label>
              <div class="coupon-input-group">
                <input type="text" id="coupon-input" placeholder="Kupon kodunuz" />
                <button id="apply-coupon" class="btn btn-secondary">Uygula</button>
              </div>
              <p id="coupon-message" class="coupon-message hidden"></p>
            </div>

            <!-- Toplam -->
            <div class="summary-details">
              <div class="summary-row">
                <span>Ara Toplam</span>
                <span id="subtotal">0₺</span>
              </div>
              <div class="summary-row">
                <span>Kargo</span>
                <span id="shipping">0₺</span>
              </div>
              <div id="discount-row" class="summary-row discount-row hidden">
                <span>İndirim</span>
                <span id="discount">0₺</span>
              </div>
            </div>

            <div class="summary-total">
              <span>Toplam</span>
              <span id="total">0₺</span>
            </div>

            <button id="checkout-btn" class="btn btn-primary btn-full btn-large" disabled>
              <span id="checkout-btn-text">💳 Ödemeye Geç</span>
            </button>

            <a href="/online-alisveris" class="continue-shopping">← Alışverişe Devam Et</a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <Footer slot="footer" />
</BaseLayout>

<script>
interface CartItem {
  id: number;
  name: string;
  price: number;
  image: string;
  unit: string;
  quantity: number;
}

let cart: CartItem[] = [];
let discountPercent = 0;
const coupons: Record<string, number> = { HOSGELDIN10: 10, YENI15: 15, KAYSER20: 20 };

// ✅ renderCart fonksiyonu global hale getirildi
window.renderCart = function renderCart() {
  const cartContainer = document.getElementById('cart-items');
  const emptyCart = document.getElementById('empty-cart');
  const checkoutBtn = document.getElementById('checkout-btn');

  if (!cartContainer || !emptyCart) return;

  if (cart.length === 0) {
    cartContainer.innerHTML = '';
    emptyCart.classList.remove('hidden');
    if (checkoutBtn) checkoutBtn.disabled = true;
    return;
  }

  emptyCart.classList.add('hidden');
  if (checkoutBtn) checkoutBtn.disabled = false;

  cartContainer.innerHTML = cart.map((item, index) => `
    <div class="cart-item">
      <div class="cart-item-image">
        <img src="${item.image}" alt="${item.name}">
      </div>
      <div class="cart-item-info">
        <h3>${item.name}</h3>
        <p class="cart-item-price">${item.price}₺ / ${item.unit}</p>
        <div class="quantity-controls">
          <button class="qty-btn decrease-qty" data-index="${index}">−</button>
          <span class="qty-amount">${item.quantity}</span>
          <button class="qty-btn increase-qty" data-index="${index}">+</button>
        </div>
      </div>
      <div class="cart-item-actions">
        <button class="remove-btn" data-index="${index}" title="Sepetten Çıkar">🗑️</button>
        <p class="cart-item-total">${(item.price * item.quantity).toFixed(2)}₺</p>
      </div>
    </div>
  `).join('');

  document.querySelectorAll('.increase-qty').forEach(btn => {
    btn.addEventListener('click', e => {
      const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
      cart[index].quantity++;
      saveCart();
    });
  });

  document.querySelectorAll('.decrease-qty').forEach(btn => {
    btn.addEventListener('click', e => {
      const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
      if (cart[index].quantity > 1) {
        cart[index].quantity--;
        saveCart();
      }
    });
  });

  document.querySelectorAll('.remove-btn').forEach(btn => {
    btn.addEventListener('click', e => {
      const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
      cart.splice(index, 1);
      saveCart();
    });
  });
}

function saveCart() {
  localStorage.setItem('cart', JSON.stringify(cart));
  window.renderCart();
  updateSummary();
  window.dispatchEvent(new Event('cartUpdated'));
}

function loadCart() {
  cart = JSON.parse(localStorage.getItem('cart') || '[]');
  window.renderCart();
  updateSummary();
}

function calculateSubtotal(): number {
  return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
}

function updateSummary() {
  const subtotal = calculateSubtotal();
  const shipping = subtotal >= 1000 ? 0 : 50;
  const discount = (subtotal * discountPercent) / 100;
  const total = subtotal + shipping - discount;

  document.getElementById('subtotal').textContent = `${subtotal.toFixed(2)}₺`;
  document.getElementById('shipping').textContent = shipping === 0 ? 'Ücretsiz' : `${shipping}₺`;
  document.getElementById('discount').textContent = `-${discount.toFixed(2)}₺`;
  document.getElementById('discount-row').classList.toggle('hidden', discount === 0);
  document.getElementById('total').textContent = `${total.toFixed(2)}₺`;
}

// ✅ Checkout işlemi
async function handleCheckout() {
  if (cart.length === 0) return;

  const email = (document.getElementById('buyer-email') as HTMLInputElement).value;
  const name = (document.getElementById('buyer-name') as HTMLInputElement).value;
  const surname = (document.getElementById('buyer-surname') as HTMLInputElement).value;

  if (!email || !name || !surname) {
    alert('Lütfen tüm bilgileri doldurun!');
    return;
  }

  localStorage.setItem('lastOrderEmail', email);
  localStorage.setItem('lastOrderName', name);
  localStorage.setItem('lastOrderSurname', surname);

  const btn = document.getElementById('checkout-btn') as HTMLButtonElement;
  const btnText = document.getElementById('checkout-btn-text');
  btn.disabled = true;
  btnText.textContent = '⏳ Ödeme hazırlanıyor...';

  const subtotal = calculateSubtotal();
  const shipping = subtotal >= 1000 ? 0 : 50;
  const discount = (subtotal * discountPercent) / 100;
  const total = subtotal + shipping - discount;

  const items = cart.map((item, i) => ({
    id: `ITEM_${i + 1}`,
    name: item.name,
    category1: 'Et Ürünleri',
    price: (item.price * item.quantity).toFixed(2),
  }));

  const buyer = {
    name,
    surname,
    email,
    identityNumber: '11111111111',
    registrationAddress: 'Kayseri, Türkiye',
    ip: '85.34.78.112',
    city: 'Kayseri',
    country: 'Turkey',
  };

  try {
    const response = await fetch('/api/create-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        items,
        buyer,
        shippingAddress: { contactName: `${name} ${surname}`, city: 'Kayseri', country: 'Turkey', address: 'Kayseri, Türkiye' },
        billingAddress: { contactName: `${name} ${surname}`, city: 'Kayseri', country: 'Turkey', address: 'Kayseri, Türkiye' },
      }),
    });

    const data = await response.json();
    console.log('📥 API yanıtı:', data);

    if (data.success && data.paymentPageUrl) {
      window.location.href = data.paymentPageUrl;
    } else {
      alert(data.error || 'Ödeme başlatılamadı!');
      btn.disabled = false;
      btnText.textContent = '💳 Ödemeye Geç';
    }
  } catch (err) {
    console.error('❌ Ödeme hatası:', err);
    alert('Sunucu hatası. Lütfen tekrar deneyin.');
    btn.disabled = false;
    btnText.textContent = '💳 Ödemeye Geç';
  }
}

document.getElementById('checkout-btn')?.addEventListener('click', handleCheckout);
document.addEventListener('DOMContentLoaded', loadCart);
</script>
