---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<BaseLayout title="Sepetim" description="Alƒ±≈üveri≈ü sepetinizi g√∂r√ºnt√ºleyin ve sipari≈ü verin">
  <Header slot="header" />

  <section class="cart-page">
    <div class="container">
      <h1>üõí Sepetim</h1>

      <div class="cart-layout">
        <div class="cart-items-section">
          <div id="cart-items" class="cart-items"></div>

          <div id="empty-cart" class="empty-cart hidden">
            <svg width="96" height="96" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
            <h3>Sepetiniz Bo≈ü</h3>
            <p>Alƒ±≈üveri≈üe ba≈ülamak i√ßin √ºr√ºnlerimize g√∂z atƒ±n</p>
            <a href="/online-alisveris" class="btn btn-primary btn-large">Alƒ±≈üveri≈üe Ba≈üla</a>
          </div>
        </div>

        <div class="cart-summary">
          <div class="summary-card">
            <h2>üìã Sipari≈ü √ñzeti</h2>

            <!-- M√º≈üteri Bilgileri -->
            <div class="customer-info-section">
              <h3>üìß ƒ∞leti≈üim Bilgileri</h3>
              <div class="form-group">
                <label for="buyer-email">E-posta *</label>
                <input type="email" id="buyer-email" placeholder="ornek@mail.com" required />
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label for="buyer-name">Ad *</label>
                  <input type="text" id="buyer-name" placeholder="Adƒ±nƒ±z" required />
                </div>
                <div class="form-group">
                  <label for="buyer-surname">Soyad *</label>
                  <input type="text" id="buyer-surname" placeholder="Soyadƒ±nƒ±z" required />
                </div>
              </div>
            </div>

            <!-- Kupon -->
            <div class="coupon-section">
              <label for="coupon-input">üéüÔ∏è ƒ∞ndirim Kuponu</label>
              <div class="coupon-input-group">
                <input type="text" id="coupon-input" placeholder="Kupon kodunuz" />
                <button id="apply-coupon" class="btn btn-secondary">Uygula</button>
              </div>
              <p id="coupon-message" class="coupon-message hidden"></p>
            </div>

            <!-- Toplam -->
            <div class="summary-details">
              <div class="summary-row">
                <span>Ara Toplam</span>
                <span id="subtotal">0‚Ç∫</span>
              </div>
              <div class="summary-row">
                <span>Kargo</span>
                <span id="shipping">0‚Ç∫</span>
              </div>
              <div id="discount-row" class="summary-row discount-row hidden">
                <span>ƒ∞ndirim</span>
                <span id="discount">0‚Ç∫</span>
              </div>
            </div>

            <div class="summary-total">
              <span>Toplam</span>
              <span id="total">0‚Ç∫</span>
            </div>

            <button id="checkout-btn" class="btn btn-primary btn-full btn-large" disabled>
              <span id="checkout-btn-text">üí≥ √ñdemeye Ge√ß</span>
            </button>

            <a href="/online-alisveris" class="continue-shopping">‚Üê Alƒ±≈üveri≈üe Devam Et</a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <Footer slot="footer" />
</BaseLayout>

<style>
.cart-page {
  padding: 4rem 0;
  min-height: 60vh;
}

.cart-layout {
  display: grid;
  grid-template-columns: 1fr 400px;
  gap: 2rem;
  margin-top: 2rem;
}

.cart-items-section {
  min-height: 300px;
}

.empty-cart {
  text-align: center;
  padding: 4rem 2rem;
  background: #f8f9fa;
  border-radius: 12px;
}

.empty-cart svg {
  color: #ccc;
  margin-bottom: 1rem;
}

.hidden {
  display: none !important;
}

.cart-item {
  display: flex;
  gap: 1.5rem;
  padding: 1.5rem;
  background: white;
  border-radius: 12px;
  margin-bottom: 1rem;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.cart-item-image img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 8px;
}

.cart-item-info {
  flex: 1;
}

.cart-item-info h3 {
  margin: 0 0 0.5rem 0;
  font-size: 1.1rem;
}

.cart-item-price {
  color: #666;
  margin: 0.25rem 0;
}

.quantity-controls {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.qty-btn {
  width: 32px;
  height: 32px;
  border: 1px solid #ddd;
  background: white;
  border-radius: 4px;
  cursor: pointer;
  font-size: 18px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
}

.qty-btn:hover {
  background: #f8f9fa;
  border-color: #999;
}

.qty-amount {
  min-width: 30px;
  text-align: center;
  font-weight: 600;
}

.cart-item-actions {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: flex-end;
}

.remove-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0.25rem;
  opacity: 0.6;
  transition: opacity 0.2s;
}

.remove-btn:hover {
  opacity: 1;
}

.cart-item-total {
  font-size: 1.25rem;
  font-weight: bold;
  color: var(--primary-color, #c41e3a);
  margin: 0;
}

.summary-card {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  position: sticky;
  top: 100px;
}

.summary-card h2 {
  margin-top: 0;
  margin-bottom: 1.5rem;
  font-size: 1.5rem;
}

.customer-info-section,
.coupon-section {
  margin-bottom: 1.5rem;
  padding-bottom: 1.5rem;
  border-bottom: 1px solid #eee;
}

.customer-info-section h3,
.coupon-section label {
  font-size: 1rem;
  margin-bottom: 1rem;
  display: block;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  font-size: 0.9rem;
}

.form-group input {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 6px;
  font-size: 1rem;
}

.form-group input:focus {
  outline: none;
  border-color: var(--primary-color, #c41e3a);
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

.coupon-input-group {
  display: flex;
  gap: 0.5rem;
}

.coupon-input-group input {
  flex: 1;
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 6px;
}

.coupon-message {
  margin-top: 0.5rem;
  padding: 0.5rem;
  border-radius: 4px;
  font-size: 0.9rem;
}

.coupon-message.success {
  background: #d4edda;
  color: #155724;
}

.coupon-message.error {
  background: #f8d7da;
  color: #721c24;
}

.summary-details {
  margin-top: 1rem;
}

.summary-row {
  display: flex;
  justify-content: space-between;
  padding: 0.75rem 0;
  border-bottom: 1px solid #eee;
}

.summary-row:last-child {
  border-bottom: none;
}

.discount-row {
  color: green;
  font-weight: 600;
}

.summary-total {
  display: flex;
  justify-content: space-between;
  padding: 1rem 0;
  font-size: 1.5rem;
  font-weight: bold;
  border-top: 2px solid #000;
  margin-top: 1rem;
}

.btn-full {
  width: 100%;
  margin-top: 1rem;
}

.btn-large {
  padding: 1rem 2rem;
  font-size: 1.1rem;
}

.continue-shopping {
  display: block;
  text-align: center;
  margin-top: 1rem;
  color: #666;
  text-decoration: none;
}

.continue-shopping:hover {
  color: var(--primary-color, #c41e3a);
}

@media (max-width: 768px) {
  .cart-layout {
    grid-template-columns: 1fr;
  }

  .form-row {
    grid-template-columns: 1fr;
  }

  .summary-card {
    position: static;
  }
}
</style>

<script>
interface CartItem {
  id: number;
  name: string;
  price: number;
  image: string;
  unit: string;
  quantity: number;
}

let cart: CartItem[] = [];
let discountPercent = 0;
const coupons: Record<string, number> = { HOSGELDIN10: 10, YENI15: 15, KAYSER20: 20 };

// ‚úÖ renderCart fonksiyonu global hale getirildi
(window as any).renderCart = function renderCart() {
  const cartContainer = document.getElementById('cart-items');
  const emptyCart = document.getElementById('empty-cart');
  const checkoutBtn = document.getElementById('checkout-btn') as HTMLButtonElement | null;

  if (!cartContainer || !emptyCart) return;

  if (cart.length === 0) {
    cartContainer.innerHTML = '';
    emptyCart.classList.remove('hidden');
    if (checkoutBtn) checkoutBtn.disabled = true;
    return;
  }

  emptyCart.classList.add('hidden');
  if (checkoutBtn) checkoutBtn.disabled = false;

  cartContainer.innerHTML = cart.map((item, index) => `
    <div class="cart-item">
      <div class="cart-item-image">
        <img src="${item.image}" alt="${item.name}">
      </div>
      <div class="cart-item-info">
        <h3>${item.name}</h3>
        <p class="cart-item-price">${item.price}‚Ç∫ / ${item.unit}</p>
        <div class="quantity-controls">
          <button class="qty-btn decrease-qty" data-index="${index}">‚àí</button>
          <span class="qty-amount">${item.quantity}</span>
          <button class="qty-btn increase-qty" data-index="${index}">+</button>
        </div>
      </div>
      <div class="cart-item-actions">
        <button class="remove-btn" data-index="${index}" title="Sepetten √áƒ±kar">üóëÔ∏è</button>
        <p class="cart-item-total">${(item.price * item.quantity).toFixed(2)}‚Ç∫</p>
      </div>
    </div>
  `).join('');

  document.querySelectorAll('.increase-qty').forEach(btn => {
    btn.addEventListener('click', e => {
      const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
      cart[index].quantity++;
      saveCart();
    });
  });

  document.querySelectorAll('.decrease-qty').forEach(btn => {
    btn.addEventListener('click', e => {
      const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
      if (cart[index].quantity > 1) {
        cart[index].quantity--;
        saveCart();
      }
    });
  });

  document.querySelectorAll('.remove-btn').forEach(btn => {
    btn.addEventListener('click', e => {
      const index = parseInt((e.currentTarget as HTMLElement).dataset.index || '0');
      cart.splice(index, 1);
      saveCart();
    });
  });
}

function saveCart() {
  localStorage.setItem('cart', JSON.stringify(cart));
  (window as any).renderCart();
  updateSummary();
  window.dispatchEvent(new Event('cartUpdated'));
}

function loadCart() {
  cart = JSON.parse(localStorage.getItem('cart') || '[]');
  (window as any).renderCart();
  updateSummary();
}

function calculateSubtotal(): number {
  return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
}

function updateSummary() {
  const subtotal = calculateSubtotal();
  const shipping = subtotal >= 1000 ? 0 : 50;
  const discount = (subtotal * discountPercent) / 100;
  const total = subtotal + shipping - discount;

  const subtotalEl = document.getElementById('subtotal');
  const shippingEl = document.getElementById('shipping');
  const discountEl = document.getElementById('discount');
  const discountRowEl = document.getElementById('discount-row');
  const totalEl = document.getElementById('total');

  if (subtotalEl) subtotalEl.textContent = `${subtotal.toFixed(2)}‚Ç∫`;
  if (shippingEl) shippingEl.textContent = shipping === 0 ? '√úcretsiz' : `${shipping}‚Ç∫`;
  if (discountEl) discountEl.textContent = `-${discount.toFixed(2)}‚Ç∫`;
  if (discountRowEl) discountRowEl.classList.toggle('hidden', discount === 0);
  if (totalEl) totalEl.textContent = `${total.toFixed(2)}‚Ç∫`;
}

// ‚úÖ Checkout i≈ülemi - D√úZELTME: response kontrol√º ve hata yakalama
async function handleCheckout() {
  if (cart.length === 0) {
    alert('Sepetiniz bo≈ü!');
    return;
  }

  const emailInput = document.getElementById('buyer-email') as HTMLInputElement;
  const nameInput = document.getElementById('buyer-name') as HTMLInputElement;
  const surnameInput = document.getElementById('buyer-surname') as HTMLInputElement;

  const email = emailInput?.value.trim();
  const name = nameInput?.value.trim();
  const surname = surnameInput?.value.trim();

  if (!email || !name || !surname) {
    alert('L√ºtfen t√ºm bilgileri doldurun!');
    return;
  }

  // Email validasyonu
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    alert('L√ºtfen ge√ßerli bir e-posta adresi girin!');
    return;
  }

  localStorage.setItem('lastOrderEmail', email);
  localStorage.setItem('lastOrderName', name);
  localStorage.setItem('lastOrderSurname', surname);

  const btn = document.getElementById('checkout-btn') as HTMLButtonElement;
  const btnText = document.getElementById('checkout-btn-text');

  if (!btn || !btnText) return;

  btn.disabled = true;
  btnText.textContent = '‚è≥ √ñdeme hazƒ±rlanƒ±yor...';

  const subtotal = calculateSubtotal();
  const shipping = subtotal >= 1000 ? 0 : 50;
  const discount = (subtotal * discountPercent) / 100;

  const items = cart.map((item, i) => ({
    id: `ITEM_${i + 1}`,
    name: item.name,
    category1: 'Et √úr√ºnleri',
    price: (item.price * item.quantity).toFixed(2),
  }));

  const buyer = {
    name,
    surname,
    email,
    identityNumber: '11111111111',
    registrationAddress: 'Kayseri, T√ºrkiye',
    ip: '85.34.78.112',
    city: 'Kayseri',
    country: 'Turkey',
  };

  const shippingAddress = {
    contactName: `${name} ${surname}`,
    city: 'Kayseri',
    country: 'Turkey',
    address: 'Kayseri, T√ºrkiye'
  };

  const billingAddress = {
    contactName: `${name} ${surname}`,
    city: 'Kayseri',
    country: 'Turkey',
    address: 'Kayseri, T√ºrkiye'
  };

  try {
    console.log('üì§ √ñdeme isteƒüi g√∂nderiliyor...');

    const response = await fetch('/api/create-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        items,
        buyer,
        shippingAddress,
        billingAddress,
      }),
    });

    console.log('üì• Response status:', response.status);
    console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));

    // ‚úÖ D√úZELTME: √ñnce response'un ba≈üarƒ±lƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol et
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå API Hatasƒ± (Status:', response.status, '):', errorText);
      console.error('‚ùå Tam hata i√ßeriƒüi:', errorText);

      // HTML hatasƒ± varsa kullanƒ±cƒ±ya anlamlƒ± mesaj g√∂ster
      if (errorText.includes('<!DOCTYPE') || errorText.includes('<html')) {
        console.error('‚ùå HTML hata sayfasƒ± alƒ±ndƒ±');
        throw new Error('Sunucu hatasƒ± olu≈ütu. L√ºtfen daha sonra tekrar deneyin.');
      }

      // Bo≈ü response
      if (!errorText || errorText.trim() === '') {
        console.error('‚ùå Bo≈ü response alƒ±ndƒ±');
        throw new Error('Sunucudan bo≈ü yanƒ±t alƒ±ndƒ±. L√ºtfen tekrar deneyin.');
      }

      // JSON hatasƒ± dene
      try {
        const errorData = JSON.parse(errorText);
        console.error('‚ùå JSON hata verisi:', errorData);
        throw new Error(errorData.error || errorData.details || `Sunucu hatasƒ±: ${response.status}`);
      } catch (parseErr) {
        console.error('‚ùå JSON parse hatasƒ±:', parseErr);
        throw new Error(`Sunucu hatasƒ±: ${response.status} - ${errorText.substring(0, 200)}`);
      }
    }

    // ‚úÖ Ba≈üarƒ±lƒ± response'u JSON'a √ßevir
    const data = await response.json();
    console.log('üî• API yanƒ±tƒ±:', data);

    if (data.success && data.paymentPageUrl) {
      console.log('‚úÖ √ñdeme sayfasƒ±na y√∂nlendiriliyor:', data.paymentPageUrl);
      window.location.href = data.paymentPageUrl;
    } else {
      throw new Error(data.error || '√ñdeme ba≈ülatƒ±lamadƒ±!');
    }
  } catch (err) {
    console.error('‚ùå √ñdeme hatasƒ±:', err);

    const errorMessage = err instanceof Error ? err.message : 'Bilinmeyen bir hata olu≈ütu';
    alert('√ñdeme Hatasƒ±: ' + errorMessage + '\n\nL√ºtfen bilgilerinizi kontrol edip tekrar deneyin.');

    btn.disabled = false;
    btnText.textContent = 'üí≥ √ñdemeye Ge√ß';
  }
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
  loadCart();

  const checkoutBtn = document.getElementById('checkout-btn');
  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', handleCheckout);
  }

  // Kupon uygulama
  const applyCouponBtn = document.getElementById('apply-coupon');
  if (applyCouponBtn) {
    applyCouponBtn.addEventListener('click', () => {
      const couponInput = document.getElementById('coupon-input') as HTMLInputElement;
      const couponMessage = document.getElementById('coupon-message');
      const coupon = couponInput?.value.toUpperCase().trim();

      if (!coupon || !couponMessage) return;

      if (coupons[coupon]) {
        discountPercent = coupons[coupon];
        couponMessage.textContent = `‚úÖ %${discountPercent} indirim uygulandƒ±!`;
        couponMessage.className = 'coupon-message success';
        couponMessage.classList.remove('hidden');
        updateSummary();
      } else {
        couponMessage.textContent = '‚ùå Ge√ßersiz kupon kodu!';
        couponMessage.className = 'coupon-message error';
        couponMessage.classList.remove('hidden');
      }
    });
  }
});
</script>