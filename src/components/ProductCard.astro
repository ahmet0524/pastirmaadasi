---
// src/components/ProductCard.astro
interface Props {
  id: string;
  slug: string;
  name: string;
  price: number;
  image: string;
  unit: string;
}

const { id, slug, name, price, image, unit } = Astro.props;
---

<div class="product-card" data-product-id={id}>
  <a href={`/urun/${slug}`} class="product-link">
    <div class="product-image">
      <img src={image} alt={name} loading="lazy" />
      <div class="product-badge">YENİ</div>
    </div>
    <div class="product-info">
      <h3 class="product-name">{name}</h3>
      <p class="product-price">{price}₺ / {unit}</p>
    </div>
  </a>

  <button
    class="btn-add-to-cart"
    data-product-id={id}
    data-product-name={name}
    data-product-price={price}
    data-product-image={image}
    data-product-unit={unit}
  >
    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
    </svg>
    <span class="btn-text">Sepete Ekle</span>
  </button>
</div>

<style>
  .product-card {
    background: white;
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: 0 4px 12px var(--shadow);
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .product-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 24px var(--shadow-lg);
  }

  .product-link {
    flex: 1;
    display: flex;
    flex-direction: column;
    text-decoration: none;
    color: inherit;
  }

  .product-image {
    position: relative;
    padding-top: 100%;
    overflow: hidden;
    background: var(--bg-light);
  }

  .product-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }

  .product-card:hover .product-image img {
    transform: scale(1.1);
  }

  .product-badge {
    position: absolute;
    top: 12px;
    right: 12px;
    background: var(--secondary);
    color: white;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
  }

  .product-info {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .product-name {
    font-size: 1.125rem;
    font-weight: 700;
    color: var(--text-dark);
    margin-bottom: 0.75rem;
    line-height: 1.4;
  }

  .product-price {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--primary);
    margin: 0;
  }

  .btn-add-to-cart {
    width: 100%;
    padding: 1rem;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 0;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 1rem;
  }

  .btn-add-to-cart:hover {
    background: var(--primary-dark);
  }

  .btn-add-to-cart.added {
    background: #10b981;
  }

  .btn-add-to-cart.added .btn-text::before {
    content: '✓ ';
  }

  @media (max-width: 768px) {
    .product-info {
      padding: 1rem;
    }

    .product-name {
      font-size: 1rem;
    }

    .product-price {
      font-size: 1.125rem;
    }

    .btn-add-to-cart {
      padding: 0.875rem;
      font-size: 0.875rem;
    }
  }
</style>

<script>
  // Sepete ekleme fonksiyonu
  function addToCart(productData: any) {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');

    const existingIndex = cart.findIndex((item: any) => item.id === productData.id);

    if (existingIndex >= 0) {
      cart[existingIndex].quantity += 1;
    } else {
      cart.push({
        id: productData.id,
        name: productData.name,
        price: parseFloat(productData.price),
        image: productData.image,
        unit: productData.unit,
        quantity: 1
      });
    }

    localStorage.setItem('cart', JSON.stringify(cart));
    window.dispatchEvent(new Event('cartUpdated'));

    return true;
  }

  // Tüm "Sepete Ekle" butonlarını dinle
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.btn-add-to-cart').forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const btn = e.currentTarget as HTMLButtonElement;

        const productData = {
          id: btn.dataset.productId,
          name: btn.dataset.productName,
          price: btn.dataset.productPrice,
          image: btn.dataset.productImage,
          unit: btn.dataset.productUnit
        };

        if (addToCart(productData)) {
          // Buton görünümünü değiştir
          btn.classList.add('added');
          const textSpan = btn.querySelector('.btn-text');
          if (textSpan) {
            textSpan.textContent = 'Sepete Git';
          }

          // 2 saniye sonra sepete yönlendir
          setTimeout(() => {
            window.location.href = '/sepet';
          }, 1500);
        }
      });
    });
  });
</script>